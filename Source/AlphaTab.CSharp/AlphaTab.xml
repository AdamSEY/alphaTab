<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AlphaTab</name>
    </assembly>
    <members>
        <member name="T:AlphaTab.Collections.FastDictionary`2">
            <summary>
            Represents a collection of key-value pairs. 
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:AlphaTab.Collections.FastDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Collections.FastDictionary`2"/> class.
            </summary>
        </member>
        <member name="P:AlphaTab.Collections.FastDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The key to access the item.</param>
            <returns>The value stored at the specified index.</returns>
        </member>
        <member name="P:AlphaTab.Collections.FastDictionary`2.Count">
            <summary>
            Gets the number of elements stored in this dictionary
            </summary>
        </member>
        <member name="M:AlphaTab.Collections.FastDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Collections.FastDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key.
            </summary>
            <param name="key">The key to remove from the dictionary. </param>
        </member>
        <member name="M:AlphaTab.Collections.FastDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary container contains the specified key.
            </summary>
            <param name="key">The key to check the existence for.</param>
            <returns>
              <c>true</c> if the specified key is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AlphaTab.Collections.FastDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AlphaTab.Collections.FastList`1">
            <summary>
            Represents a strongly typed list of elements. 
            </summary>
            <typeparam name="T">The type fo the elements</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Collections.FastList`1" /> class.
            </summary>
        </member>
        <member name="P:AlphaTab.Collections.FastList`1.Count">
            <summary>
            Gets the number of elements contained in the list.
            </summary>
        </member>
        <member name="P:AlphaTab.Collections.FastList`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The index of which item to access.</param>
            <returns>The item located at the specified index. </returns>
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.Add(`0)">
            <summary>
            Adds the specified item to the list. 
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the list using the specified comparison.
            </summary>
            <param name="comparison">The comparison to use when comparing elements for sorting.</param>
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index. 
            </summary>
            <param name="index">The index to remove.</param>
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.ToArray">
            <summary>
            Converts the current list into an array of all elements. 
            </summary>
            <returns>An array containing all elements. </returns>
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.IndexOf(`0)">
            <summary>
            Searches for the given item in the list and returns the index. 
            </summary>
            <param name="item">The item to search</param>
            <returns>The index at which the specified item was found, or -1 if the item is not contained in the list.</returns>
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.Reverse">
            <summary>
            Reverses the items in the list
            </summary>
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.InsertAt(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index. 
            </summary>
            <param name="insertPos">The index at which the item should be inserted</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:AlphaTab.Collections.FastList`1.Clear">
            <summary>
            Remove all elements from the list.
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Synth.Ds.SampleArray">
            <summary>
            Represents an array of audiosamples. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Ds.SampleArray.Samples">
            <summary>
            Gets the audio samples as floats. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Ds.SampleArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Synth.Ds.SampleArray"/> class.
            </summary>
            <param name="length">The length of the array.</param>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Ds.SampleArray.Item(System.Int32)">
            <summary>
            Gets or sets the sample at the specified index.
            </summary>
            <param name="index">The index of the sample to get or set.</param>
            <returns>The sample at the specified index.</returns>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Ds.SampleArray.Length">
            <summary>
            Gets the total number of samples contained in this array
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Ds.SampleArray.Clear">
            <summary>
            Resets all samples in the array to 0. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Ds.SampleArray.Blit(AlphaTab.Audio.Synth.Ds.SampleArray,System.Int32,AlphaTab.Audio.Synth.Ds.SampleArray,System.Int32,System.Int32)">
            <summary>
            Copies a range of samples from the given source array into the specified destination. 
            </summary>
            <param name="src">The array where to copy the samples from.</param>
            <param name="srcPos">The start index from which to start copying.</param>
            <param name="dest">The array where to copy the samples to.</param>
            <param name="destPos">The start index at which the samples should be written in the destination array.</param>
            <param name="len">The number of samples to copy.</param>
        </member>
        <member name="T:AlphaTab.Audio.Synth.Ds.CircularSampleBuffer">
            <summary>
            Represents a fixed size circular sample buffer that can be written to and read from. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Ds.CircularSampleBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Synth.Ds.CircularSampleBuffer"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Ds.CircularSampleBuffer.Count">
            <summary>
            Gets the number of samples written to the buffer. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Ds.CircularSampleBuffer.Clear">
            <summary>
            Clears all samples written to this buffer. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Ds.CircularSampleBuffer.Write(AlphaTab.Audio.Synth.Ds.SampleArray,System.Int32,System.Int32)">
            <summary>
            Writes the given samples to this buffer. 
            </summary>
            <param name="data">The sample array to read from. </param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Ds.CircularSampleBuffer.Read(AlphaTab.Audio.Synth.Ds.SampleArray,System.Int32,System.Int32)">
            <summary>
            Reads the requested amount of samples from the buffer. 
            </summary>
            <param name="data">The sample array to store the read elements.</param>
            <param name="offset">The offset within the destination buffer to put the items at.</param>
            <param name="count">The number of items to read from this buffer.</param>
            <returns>The number of items actually read from the buffer.</returns>
        </member>
        <member name="T:AlphaTab.Audio.Synth.AlphaSynth">
            <summary>
            This is the main synthesizer component which can be used to
            play a <see cref="T:AlphaTab.Audio.Synth.Midi.MidiFile"/> via a <see cref="T:AlphaTab.Audio.Synth.ISynthOutput"/>.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.Output">
            <summary>
            Gets the <see cref="T:AlphaTab.Audio.Synth.ISynthOutput"/> used for playing the generated samples. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.IsReady">
            <inheritdoc />
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.IsReadyForPlayback">
            <inheritdoc />
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.State">
            <inheritdoc />
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.LogLevel">
            <inheritdoc />
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.MasterVolume">
            <inheritdoc />
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.MetronomeVolume">
            <inheritdoc />
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.PlaybackSpeed">
            <inheritdoc />
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.TickPosition">
            <inheritdoc />
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.TimePosition">
            <inheritdoc />
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.PlaybackRange">
            <inheritdoc />
        </member>
        <member name="P:AlphaTab.Audio.Synth.AlphaSynth.IsLooping">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.Destroy">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.#ctor(AlphaTab.Audio.Synth.ISynthOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Synth.AlphaSynth"/> class.
            </summary>
            <param name="output">The output to use for playing the generated samples.</param>
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.Play">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.Pause">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.PlayPause">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.Stop">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.LoadSoundFont(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.LoadMidiFile(AlphaTab.Audio.Synth.Midi.MidiFile)">
            <summary>
            Loads the given midi file for playback. 
            </summary>
            <param name="midiFile">The midi file to load</param>
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.SetChannelMute(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.ResetChannelStates">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.SetChannelSolo(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.SetChannelVolume(System.Int32,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Synth.AlphaSynth.SetChannelProgram(System.Int32,System.Byte)">
            <inheritdoc />
        </member>
        <member name="E:AlphaTab.Audio.Synth.AlphaSynth.Ready">
            <inheritdoc />
        </member>
        <member name="E:AlphaTab.Audio.Synth.AlphaSynth.Finished">
            <summary>
            Occurs when the playback of the whole midi file finished.
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.AlphaSynth.StateChanged">
            <summary>
            Occurs when the playback state changes. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.AlphaSynth.SoundFontLoaded">
            <summary>
            Occurs when the soundfont was successfully loaded. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.AlphaSynth.ReadyForPlayback">
            <summary>
            Occurs when AlphaSynth is ready to start the playback.
            This is the case once the <see cref="T:AlphaTab.Audio.Synth.ISynthOutput"/> is ready, a SoundFont was loaded and also a MidiFle is loaded. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.AlphaSynth.SoundFontLoadFailed">
            <summary>
            Occurs when the soundfont failed to be loaded. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.AlphaSynth.MidiLoaded">
            <summary>
            Occurs when the midi file was successfully loaded. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.AlphaSynth.MidiLoadFailed">
            <summary>
            Occurs when the midi failed to be loaded. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.AlphaSynth.PositionChanged">
            <summary>
            Occurs whenever the current time of the played audio changes. 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Synth.ProgressEventArgs">
            <summary>
            Represents the progress of any data being loaded. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.ProgressEventArgs.Loaded">
            <summary>
            Gets the currently loaded bytes. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.ProgressEventArgs.Total">
            <summary>
            Gets the total number of bytes to load. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.ProgressEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Synth.ProgressEventArgs"/> class.
            </summary>
            <param name="loaded"></param>
            <param name="total"></param>
        </member>
        <member name="T:AlphaTab.Audio.Synth.PlaybackFinishedEventArgs">
            <summary>
            Represents the info when the playback of a whole song finished. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.PlaybackFinishedEventArgs.IsLooping">
            <summary>
            Gets a value indicating whether looping is active, and the playback will start automatically again at the beginning. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.PlaybackFinishedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Synth.PlaybackFinishedEventArgs"/> class.
            </summary>
            <param name="isLooping"></param>
        </member>
        <member name="T:AlphaTab.Audio.Synth.PlayerStateChangedEventArgs">
            <summary>
            Represents the info when the player state changes. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.PlayerStateChangedEventArgs.State">
            <summary>
            The new state of the player.
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.PlayerStateChangedEventArgs.#ctor(AlphaTab.Audio.Synth.PlayerState)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Synth.PlayerStateChangedEventArgs"/> class.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:AlphaTab.Audio.Synth.PositionChangedEventArgs">
            <summary>
            Represents the info when the time in the synthesizer changes. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.PositionChangedEventArgs.CurrentTime">
            <summary>
            Gets the current time in milliseconds. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.PositionChangedEventArgs.EndTime">
            <summary>
            Gets the length of the played song in milliseconds. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.PositionChangedEventArgs.CurrentTick">
            <summary>
            Gets the current time in midi ticks. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.PositionChangedEventArgs.EndTick">
            <summary>
            Gets the length of the played song in midi ticks. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.PositionChangedEventArgs.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Synth.PositionChangedEventArgs"/> class.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="endTime">The end time.</param>
            <param name="currentTick">The current tick.</param>
            <param name="endTick">The end tick.</param>
        </member>
        <member name="T:AlphaTab.Audio.Synth.IAlphaSynth">
            <summary>
            The public API interface for interacting with the synthesizer.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.IsReady">
            <summary>
            Gets or sets whether the synthesizer is ready for interaction. (output and worker are initialized)
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.IsReadyForPlayback">
            <summary>
            Gets or sets whether the synthesizer is ready for playback. (output, worker are initialized, soundfont and midi are loaded)
            </summary>p
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.State">
            <summary>
            Gets the current player state.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.LogLevel">
            <summary>
            Gets or sets the loging level. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.MasterVolume">
            <summary>
            Gets or sets the current master volume as percentage. (range: 0.0-3.0, default 1.0)
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.MetronomeVolume">
            <summary>
            Gets or sets the metronome volume. (range: 0.0-3.0, default 0.0)
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.PlaybackSpeed">
            <summary>
            Gets or sets the current playback speed as percentage. (range: 0.125-8.0, default: 1.0)
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.TickPosition">
            <summary>
            Gets or sets the position within the song in midi ticks.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.TimePosition">
            <summary>
            Gets or sets the position within the song in milliseconds.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.PlaybackRange">
            <summary>
            Gets or sets the range of the song that should be played. Set this to null
            to play the whole song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.IAlphaSynth.IsLooping">
            <summary>
            Gets or sets whether the playback should automatically restart after it finished. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.Destroy">
            <summary>
            Destroys the synthesizer and all related components
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.Play">
            <summary>
            Starts the playback if possible
            </summary>  
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.Pause">
            <summary>
            Pauses the playback if was running
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.PlayPause">
            <summary>
            Starts the playback if possible, pauses the playback if was running
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.Stop">
            <summary>
            Stopps the playback
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.LoadSoundFont(System.Byte[])">
             <summary>
            Loads a soundfont from the given data
             </summary>
             <param name="data">a byte array to load the data from </param>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.LoadMidiFile(AlphaTab.Audio.Synth.Midi.MidiFile)">
            <summary>
            Loads the given midi file structure. 
            </summary>
            <param name="midi"></param>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.SetChannelMute(System.Int32,System.Boolean)">
            <summary>
            Gets the mute state of a channel.
            </summary>
            <param name="channel">The channel number</param>
            <param name="mute">true if the channel should be muted, otherwise false.</param>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.ResetChannelStates">
            <summary>
            Resets the mute/solo state of all channels
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.SetChannelSolo(System.Int32,System.Boolean)">
            <summary>
            Gets the solo state of a channel.
            </summary>
            <param name="channel">The channel number</param>
            <param name="solo">true if the channel should be played solo, otherwise false.</param>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.SetChannelVolume(System.Int32,System.Double)">
            <summary>
            Gets or sets the current and initial volume of the given channel.
            </summary>
            <param name="channel">The channel number.</param>
            <param name="volume">The volume of of the channel (0.0-3.0)</param>
        </member>
        <member name="M:AlphaTab.Audio.Synth.IAlphaSynth.SetChannelProgram(System.Int32,System.Byte)">
            <summary>
            Gets or sets the current and initial program of the given channel.
            </summary>
            <param name="channel">The channel number.</param>
            <param name="program">The midi program.</param>
        </member>
        <member name="E:AlphaTab.Audio.Synth.IAlphaSynth.Ready">
            <summary>
            This event is fired when the player is ready to be interacted with. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.IAlphaSynth.ReadyForPlayback">
            <summary>
            This event is fired when all required data for playback is loaded and ready. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.IAlphaSynth.Finished">
            <summary>
            This event is fired when the playback of the whole song finished. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.IAlphaSynth.SoundFontLoaded">
            <summary>
            This event is fired when the SoundFont needed for playback was loaded. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.IAlphaSynth.SoundFontLoadFailed">
            <summary>
            This event is fired when the loading of the SoundFont failed. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.IAlphaSynth.MidiLoaded">
            <summary>
            This event is fired when the Midi file needed for playback was loaded. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.IAlphaSynth.MidiLoadFailed">
            <summary>
            This event is fired when the loading of the Midi file failed. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.IAlphaSynth.StateChanged">
            <summary>
            This event is fired when the playback state changed. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.IAlphaSynth.PositionChanged">
            <summary>
            This event is fired when the current playback position of the song changed. 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Synth.ISynthOutput">
            <summary>
            This is the base interface for output devices which can
            request and playback audio samples. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.ISynthOutput.SampleRate">
            <summary>
            Gets the sample rate required by the output.
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.ISynthOutput.Open">
            <summary>
            Called when the output should be opened.
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.ISynthOutput.SequencerFinished">
            <summary>
            Called when the sequencer finished the playback. 
            This tells the output not to request any samples anymore after the existing buffers are finished. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.ISynthOutput.Play">
            <summary>
            Called when the output should start the playback. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.ISynthOutput.Pause">
            <summary>
            Called when the output should stop the playback.
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.ISynthOutput.AddSamples(AlphaTab.Audio.Synth.Ds.SampleArray)">
            <summary>
            Called when samples have been synthesized and should be added to the playback buffer.
            </summary>
            <param name="samples"></param>
        </member>
        <member name="M:AlphaTab.Audio.Synth.ISynthOutput.ResetSamples">
            <summary>
            Called when the samples in the output buffer should be reset. This is neeed for instance when seeking to another position. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.ISynthOutput.Ready">
            <summary>
            Fired when the output has been successfully opened and is ready to play samples.
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.ISynthOutput.SamplesPlayed">
            <summary>
            Fired when a certain number of samples have been played. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.ISynthOutput.SampleRequest">
            <summary>
            Fired when the output needs more samples to be played. 
            </summary>
        </member>
        <member name="E:AlphaTab.Audio.Synth.ISynthOutput.Finished">
            <summary>
            Fired when the last samples after calling SequencerFinished have been played. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.ISynthOutput.Activate">
            <summary>
            Activates the output component. 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Synth.MidiFileSequencer">
            <summary>
            This sequencer dispatches midi events to the synthesizer based on the current
            synthesize position. The sequencer does not consider the playback speed. 
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.MidiFileSequencer._currentTime">
            <remarks>
            Note that this is not the actual playback position. It's the position where we are currently synthesizing at. 
            Depending on the buffer size of the output, this position is after the actual playback. 
            </remarks>
        </member>
        <member name="P:AlphaTab.Audio.Synth.MidiFileSequencer.EndTick">
            <summary>
            Gets the duration of the song in ticks. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.MidiFileSequencer.EndTime">
            <summary>
            Gets the duration of the song in milliseconds. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.MidiFileSequencer.PlaybackSpeed">
            <summary>
            Gets or sets the playback speed. 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Synth.Midi.Event.MidiEventType">
            <summary>
            Lists all midi events. 
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.MidiEventType.NoteOff">
            <summary>
            A note is released. 
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.MidiEventType.NoteOn">
            <summary>
            A note is started. 
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.MidiEventType.NoteAftertouch">
            <summary>
            The pressure that was used to play the note. 
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.MidiEventType.Controller">
            <summary>
            Change of a midi controller
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.MidiEventType.ProgramChange">
            <summary>
            Change of a midi program
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.MidiEventType.ChannelAftertouch">
            <summary>
            The pressure that should be applied to the whole channel. 
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.MidiEventType.PitchBend">
            <summary>
            A change of the audio pitch. 
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.MidiEventType.Meta">
            <summary>
            A meta event. See <see cref="T:AlphaTab.Audio.Synth.Midi.Event.MetaEventTypeEnum"/> for details. 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Synth.Midi.Event.ControllerType">
            <summary>
            Lists all midi controllers. 
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.BankSelectCoarse">
            <summary>
            Bank Select. MSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.ModulationCoarse">
            <summary>
            Modulation wheel or lever MSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.DataEntryCoarse">
            <summary>
            Data entry MSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.VolumeCoarse">
            <summary>
            Channel Volume MSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.PanCoarse">
            <summary>
            Pan MSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.ExpressionControllerCoarse">
            <summary>
            Expression Controller MSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.ModulationFine">
            <summary>
            Modulation wheel or level LSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.DataEntryFine">
            <summary>
            Data Entry LSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.VolumeFine">
            <summary>
            Channel Volume LSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.PanFine">
            <summary>
            Pan LSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.ExpressionControllerFine">
            <summary>
            Expression controller LSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.HoldPedal">
            <summary>
            Damper pedal (sustain)
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.LegatoPedal">
            <summary>
            Legato Footswitch
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.NonRegisteredParameterFine">
            <summary>
            Non-Registered Parameter Number LSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.NonRegisteredParameterCourse">
            <summary>
            Non-Registered Parameter Number MSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.RegisteredParameterFine">
            <summary>
            Registered Parameter Number LSB 
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.RegisteredParameterCourse">
            <summary>
            Registered Parameter Number MSB
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.ResetControllers">
            <summary>
            Reset all controllers
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.Midi.Event.ControllerType.AllNotesOff">
            <summary>
            All notes of. 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Synth.Midi.Event.MidiEvent">
            <summary>
            Represents a midi event. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Midi.Event.MidiEvent.Message">
            <summary>
            Gets or sets the raw midi message. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Midi.Event.MidiEvent.Tick">
            <summary>
            Gets or sets the absolute tick of this midi event. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Midi.Event.MidiEvent.Channel">
            <summary>
            Gets or sets the channel of this midi event. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Midi.Event.MidiEvent.Command">
            <summary>
            Gets or sets the command of this midi event. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Midi.Event.MidiEvent.Data1">
            <summary>
            Gets or sets the first data component of this midi event. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Midi.Event.MidiEvent.Data2">
            <summary>
            Gets or sets the second data component of this midi event. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Midi.Event.MidiEvent.#ctor(System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Synth.Midi.Event.MidiEvent"/> class.
            </summary>
            <param name="tick">The absolute midi ticks of this event..</param>
            <param name="status">The status information of this event.</param>
            <param name="data1">The first data component of this midi event.</param>
            <param name="data2">The second data component of this midi event.</param>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Midi.Event.MidiEvent.WriteTo(AlphaTab.IO.IWriteable)">
            <summary>
            Writes the midi event as binary into the given stream. 
            </summary>
            <param name="s">The stream to write to.</param>
        </member>
        <member name="T:AlphaTab.Audio.Synth.Midi.MidiFile">
            <summary>
            Represents a midi file with a single track that can be played via <see cref="T:AlphaTab.Audio.Synth.AlphaSynth"/>
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Midi.MidiFile.Division">
            <summary>
            Gets or sets the division per quarter notes. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Midi.MidiFile.Events">
            <summary>
            Gets a list of midi events sorted by time. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Midi.MidiFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Synth.Midi.MidiFile"/> class.
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Midi.MidiFile.AddEvent(AlphaTab.Audio.Synth.Midi.Event.MidiEvent)">
            <summary>
            Adds the given midi event a the correct time position into the file. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Midi.MidiFile.ToBinary">
            <summary>
            Writes the midi file into a binary format. 
            </summary>
            <returns>The binary midi file.</returns>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Midi.MidiFile.WriteTo(AlphaTab.IO.IWriteable)">
            <summary>
            Writes the midi file as binary into the given stream.
            </summary>
            <returns>The stream to write to.</returns>
        </member>
        <member name="T:AlphaTab.Audio.Synth.PlayerState">
            <summary>
            Lists the different states of the player
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.PlayerState.Paused">
            <summary>
            Player is paused
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.Synth.PlayerState.Playing">
            <summary>
            Player is playing
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Synth.Synthesis.PlaybackRange">
            <summary>
            Represents a range of the song that should be played.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.PlaybackRange.StartTick">
            <summary>
            The position in midi ticks from where the song should start.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.PlaybackRange.EndTick">
            <summary>
            The position in midi ticks to where the song should be played.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.Synthesizer.MicroBufferSize">
            <summary>
            The size of the individual sub buffers in samples
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.Synthesizer.MicroBufferCount">
            <summary>
            The number of sub buffers
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.Synthesizer.SampleBuffer">
            <summary>
            Gets or sets the overall buffer of samples consisting of multiple microbuffers. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.Synthesizer.SoundBank">
            <summary>
            The patch bank that holds all of the currently loaded instrument patches
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.Synthesizer.SampleRate">
            <summary>
            The number of samples per second produced per channel
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.Synthesizer.MasterVolume">
            <summary>
            The master volume 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.Synthesizer.MetronomeVolume">
            <summary>
            The metronome volume 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Synth.Synthesis.SynthParameters">
            <summary>
            Parameters for a single synth channel including its program, bank, and cc list.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.Program">
            <summary>
            program number
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.BankSelect">
            <summary>
            bank number
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.ChannelAfterTouch">
            <summary>
            channel pressure event
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.Pan">
            <summary>
            (vol) pan positions controlling both right and left output levels
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.Volume">
            <summary>
            (vol) channel volume controller
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.Expression">
            <summary>
            (vol) expression controller
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.ModRange">
            <summary>
            (pitch) mod wheel pitch modifier in partial cents ie. 22.3
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.PitchBend">
            <summary>
            (pitch) pitch bend including both semitones and cents
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.PitchBendRangeCoarse">
            <summary>
            controls max and min pitch bend range semitones
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.PitchBendRangeFine">
            <summary>
            controls max and min pitch bend range cents
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.MasterCoarseTune">
            <summary>
            (pitch) transposition in semitones
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.MasterFineTune">
            <summary>
            (pitch) transposition in cents
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.HoldPedal">
            <summary>
            hold pedal status (true) for active
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.LegatoPedal">
            <summary>
            legato pedal status (true) for active
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Synth.Synthesis.SynthParameters.Rpn">
            <summary>
            registered parameter number
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Synth.Synthesis.SynthParameters.ResetControllers">
            <summary>
            Resets all of the channel's controllers to initial first power on values. Not the same as CC-121.
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.GeneralMidi">
            <summary>
            This public class provides names for all general midi instruments.
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler">
            <summary>
            This implementation of the <see cref="T:AlphaTab.Audio.Generator.IMidiFileHandler"/> generates a <see cref="T:AlphaTab.Audio.Synth.Midi.MidiFile"/>
            object which can be used in AlphaSynth for playback. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler.#ctor(AlphaTab.Audio.Synth.Midi.MidiFile)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler"/> class.
            </summary>
            <param name="midiFile">The midi file.</param>
        </member>
        <member name="M:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler.AddTimeSignature(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler.AddRest(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler.AddNote(System.Int32,System.Int32,System.Int32,System.Byte,AlphaTab.Model.DynamicValue,System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler.AddControlChange(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler.AddProgramChange(System.Int32,System.Int32,System.Byte,System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler.AddTempo(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler.AddBend(System.Int32,System.Int32,System.Byte,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Audio.Generator.AlphaSynthMidiFileHandler.FinishTrack(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:AlphaTab.Audio.Generator.IMidiFileHandler">
            <summary>
            A handler is responsible for writing midi events to a custom structure
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Generator.IMidiFileHandler.AddTimeSignature(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a time signature to the generated midi file
            </summary>
            <param name="tick">The midi ticks when this event should be happening. </param>
            <param name="timeSignatureNumerator">The time signature numerator</param>
            <param name="timeSignatureDenominator">The time signature denominator</param>
        </member>
        <member name="M:AlphaTab.Audio.Generator.IMidiFileHandler.AddRest(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a rest to the generated midi file. 
            </summary>
            <param name="track">The midi track on which the rest should be "played".</param>
            <param name="tick">The midi ticks when the rest is "playing". </param>
            <param name="channel">The midi channel on which the rest should be "played".</param>
        </member>
        <member name="M:AlphaTab.Audio.Generator.IMidiFileHandler.AddNote(System.Int32,System.Int32,System.Int32,System.Byte,AlphaTab.Model.DynamicValue,System.Byte)">
            <summary>
            Adds a note to the generated midi file
            </summary>
            <param name="track">The midi track on which the note should be played.</param>
            <param name="start">The midi ticks when the note should start playing. </param>
            <param name="length">The duration the note in midi ticks. </param>
            <param name="key">The key of the note to play</param>
            <param name="dynamicValue">The dynamic which should be applied to the note. </param>
            <param name="channel">The midi channel on which the note should be played.</param>
        </member>
        <member name="M:AlphaTab.Audio.Generator.IMidiFileHandler.AddControlChange(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Adds a control change to the generated midi file. 
            </summary>
            <param name="track">The midi track on which the controller should change.</param>
            <param name="tick">The midi ticks when the controller should change.</param>
            <param name="channel">The midi channel on which the controller should change.</param>
            <param name="controller">The midi controller that should change.</param>
            <param name="value">The value to which the midi controller should change</param>
        </member>
        <member name="M:AlphaTab.Audio.Generator.IMidiFileHandler.AddProgramChange(System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
            Add a program change to the generated midi file
            </summary>
            <param name="track">The midi track on which the program should change.</param>
            <param name="tick">The midi ticks when the program should change.</param>
            <param name="channel">The midi channel on which the program should change.</param>
            <param name="program">The new program for the selected track and channel.</param>
        </member>
        <member name="M:AlphaTab.Audio.Generator.IMidiFileHandler.AddTempo(System.Int32,System.Int32)">
            <summary>
            Add a tempo change to the generated midi file. 
            </summary>
            <param name="tick">The midi ticks when the tempo should change change.</param>
            <param name="tempo">The tempo as BPM</param>
        </member>
        <member name="M:AlphaTab.Audio.Generator.IMidiFileHandler.AddBend(System.Int32,System.Int32,System.Byte,System.Int32)">
            <summary>
            Add a bend to the generated midi file. 
            </summary>
            <param name="track">The midi track on which the bend should change.</param>
            <param name="tick">The midi ticks when the bend should change.</param>
            <param name="channel">The midi channel on which the bend should change.</param>
            <param name="value">The new bend for the selected track and channel.</param>
        </member>
        <member name="M:AlphaTab.Audio.Generator.IMidiFileHandler.FinishTrack(System.Int32,System.Int32)">
            <summary>
            Indicates that the track is finished on the given ticks.
            </summary>
            <param name="track">The track that was finished. </param>
            <param name="tick">The end tick for this track.</param>
        </member>
        <member name="T:AlphaTab.Audio.Generator.MidiFileGenerator">
            <summary>
            This generator creates a midi file using a score. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Generator.MidiFileGenerator.TickLookup">
            <summary>
            Gets a lookup object which can be used to quickly find beats and bars
            at a given midi tick position.
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.Generator.MidiFileGenerator.#ctor(AlphaTab.Model.Score,AlphaTab.Settings,AlphaTab.Audio.Generator.IMidiFileHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.Generator.MidiFileGenerator"/> class.
            </summary>
            <param name="score">The score for which the midi file should be generated.</param>
            <param name="settings">The settings ot use for generation.</param>
            <param name="handler">The handler that should be used for generating midi events.</param>
        </member>
        <member name="M:AlphaTab.Audio.Generator.MidiFileGenerator.Generate">
            <inheritdoc />
        </member>
        <member name="F:AlphaTab.Audio.MidiUtils.QuarterTime">
            <summary>
            The amount of ticks per quarter note used within this midi system.
            (Pulses Per Quarter Note)
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.MidiUtils.TicksToMillis(System.Int32,System.Int32)">
            <summary>
            Converts the given midi tick duration into milliseconds. 
            </summary>
            <param name="ticks">The duration in midi ticks</param>
            <param name="tempo">The current tempo in BPM.</param>
            <returns>The converted duration in milliseconds. </returns>
        </member>
        <member name="M:AlphaTab.Audio.MidiUtils.MillisToTicks(System.Int32,System.Int32)">
            <summary>
            Converts the given midi tick duration into milliseconds. 
            </summary>
            <param name="millis">The duration in milliseconds</param>
            <param name="tempo">The current tempo in BPM.</param>
            <returns>The converted duration in midi ticks. </returns>
        </member>
        <member name="M:AlphaTab.Audio.MidiUtils.ToTicks(AlphaTab.Model.Duration)">
            <summary>
            Converts a duration value to its ticks equivalent.
            </summary>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Audio.MidiUtils.ValueToTicks(System.Int32)">
            <summary>
            Converts a numerical value to its ticks equivalent.
            </summary>
            <param name="duration">the numerical proportion to convert. (i.E. timesignature denominator, note duration,...)</param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Audio.BeatTickLookup">
            <summary>
            Represents the time period, for which a <see cref="P:AlphaTab.Audio.BeatTickLookup.Beat"/> is played.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.BeatTickLookup.Start">
            <summary>
            Gets or sets the start time in midi ticks at which the given beat is played. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.BeatTickLookup.End">
            <summary>
            Gets or sets the end time in midi ticks at which the given beat is played. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.BeatTickLookup.Beat">
            <summary>
            Gets or sets the beat which is played.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.BeatTickLookup.IsEmptyBar">
            <summary>
            Gets or sets whether the beat is the placeholder beat for an empty bar. 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.MasterBarTickLookup">
            <summary>
            Represents the time period, for which all bars of a <see cref="P:AlphaTab.Audio.MasterBarTickLookup.MasterBar"/> are played.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.MasterBarTickLookup.Start">
            <summary>
            Gets or sets the start time in midi ticks at which the MasterBar is played. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.MasterBarTickLookup.End">
            <summary>
            Gets or sets the end time in midi ticks at which the MasterBar is played. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.MasterBarTickLookup.Tempo">
            <summary>
            Gets or sets the current tempo when the MasterBar is played.
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.MasterBarTickLookup.MasterBar">
            <summary>
            Gets or sets the MasterBar which is played. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.MasterBarTickLookup.Beats">
            <summary>
            Gets or sets the list of <see cref="T:AlphaTab.Audio.BeatTickLookup"/> object which define the durations
            for all <see cref="P:AlphaTab.Audio.MasterBarTickLookup.Beats"/> played within the period of this MasterBar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.MasterBarTickLookup.NextMasterBar">
            <summary>
            Gets or sets the <see cref="T:AlphaTab.Audio.MasterBarTickLookup"/> of the next masterbar in the <see cref="T:AlphaTab.Model.Score"/>
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.MasterBarTickLookup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.MasterBarTickLookup"/> class.
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.MasterBarTickLookup.Finish">
            <summary>
            Performs the neccessary finalization steps after all information was written. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.MasterBarTickLookup.AddBeat(AlphaTab.Audio.BeatTickLookup)">
            <summary>
            Adds a new <see cref="T:AlphaTab.Audio.BeatTickLookup"/> to the list of played beats during this MasterBar period. 
            </summary>
            <param name="beat"></param>
        </member>
        <member name="T:AlphaTab.Audio.MidiTickLookupFindBeatResult">
            <summary>
            Represents the results of searching the currently played beat. 
            </summary>
            <seealso cref="M:AlphaTab.Audio.MidiTickLookup.FindBeat(AlphaTab.Model.Track[],System.Int32)"/>
        </member>
        <member name="P:AlphaTab.Audio.MidiTickLookupFindBeatResult.CurrentBeat">
            <summary>
            Gets or sets the beat that is currently played. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.MidiTickLookupFindBeatResult.NextBeat">
            <summary>
            Gets or sets the beat that will be played next. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.MidiTickLookupFindBeatResult.Duration">
            <summary>
            Gets or sets the duration in milliseconds how long this beat is playing. 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.MidiTickLookup">
            <summary>
            This class holds all information about when <see cref="T:AlphaTab.Model.MasterBar"/>s and <see cref="T:AlphaTab.Model.Beat"/>s are played. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.MidiTickLookup.MasterBarLookup">
            <summary>
            Gets a dictionary of all master bars played. The index is the index equals to <see cref="P:AlphaTab.Model.MasterBar.Index"/>.
            </summary>
            <remarks>
            This lookup only contains the first time a MasterBar is played. For a whole sequence of the song refer to <see cref="P:AlphaTab.Audio.MidiTickLookup.MasterBars"/>.
            </remarks>
        </member>
        <member name="P:AlphaTab.Audio.MidiTickLookup.MasterBars">
            <summary>
            Gets a list of all <see cref="T:AlphaTab.Audio.MasterBarTickLookup"/> sorted by time. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.MidiTickLookup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Audio.MidiTickLookup"/> class.
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.MidiTickLookup.Finish">
            <summary>
            Performs the neccessary finalization steps after all information was written. 
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.MidiTickLookup.FindBeat(AlphaTab.Model.Track[],System.Int32)">
            <summary>
            Finds the currently played beat given a list of tracks and the current time. 
            </summary>
            <param name="tracks">The tracks in which to search the played beat for.</param>
            <param name="tick">The current time in midi ticks.</param>
            <returns>The information about the current beat or null if no beat could be found.</returns>
        </member>
        <member name="M:AlphaTab.Audio.MidiTickLookup.GetMasterBar(AlphaTab.Model.MasterBar)">
            <summary>
            Gets the <see cref="T:AlphaTab.Audio.MasterBarTickLookup"/> for a given masterbar at which the masterbar is played the first time. 
            </summary>
            <param name="bar">The masterbar to find the time period for. </param>
            <returns>A <see cref="T:AlphaTab.Audio.MasterBarTickLookup"/> containing the details about the first time the <see cref="T:AlphaTab.Model.MasterBar"/> is played.</returns>
        </member>
        <member name="M:AlphaTab.Audio.MidiTickLookup.GetMasterBarStart(AlphaTab.Model.MasterBar)">
            <summary>
            Gets the start time in midi ticks for a given masterbar at which the masterbar is played the first time. 
            </summary>
            <param name="bar">The masterbar to find the time period for. </param>
            <returns>The time in midi ticks at which the masterbar is played the first time or 0 if the masterbar is not contained</returns>
        </member>
        <member name="M:AlphaTab.Audio.MidiTickLookup.AddMasterBar(AlphaTab.Audio.MasterBarTickLookup)">
            <summary>
            Adds a new <see cref="T:AlphaTab.Audio.MasterBarTickLookup"/> to the lookup table. 
            </summary>
            <param name="masterBar">The item to add. </param>
        </member>
        <member name="M:AlphaTab.Audio.MidiTickLookup.AddBeat(AlphaTab.Audio.BeatTickLookup)">
            <summary>
            Adds the given <see cref="T:AlphaTab.Audio.BeatTickLookup"/> to the current <see cref="T:AlphaTab.Audio.MasterBarTickLookup"/>.
            </summary>
            <param name="beat">The lookup to add.</param>
        </member>
        <member name="T:AlphaTab.Environment">
            <summary>
            This public class represents the global alphaTab environment where
            alphaTab looks for information like available layout engines
            staves etc.
            </summary>
        </member>
        <member name="T:AlphaTab.IO.ZipFile">
            <summary>
            This class allows reading zip files.
            </summary>
        </member>
        <member name="M:AlphaTab.IO.ZipFile.Load(AlphaTab.IO.IReadable)">
            <summary>
            Load a complete ZipFile to the memory.
            </summary>
            <param name="s">the binary source to read from.</param>
            <returns></returns>
        </member>
        <member name="P:AlphaTab.IO.ZipFile.FileFilter">
            <summary>
            You can set a file filter method using this setter. On parsing
            the filestructure this function can determine based on the filename 
            whether this file will be available after loading. 
            This way we can reduce the amount of memory we store.
            </summary>
        </member>
        <member name="P:AlphaTab.IO.ZipFile.Entries">
            <summary>
            Gets the list of entries stored in this Zip File.
            </summary>
        </member>
        <member name="M:AlphaTab.IO.ZipFile.#ctor">
            <summary>
            Creates a new GpxFileSystem instance
            </summary>
        </member>
        <member name="T:AlphaTab.IO.BitReader">
            <summary>
            This utility public class allows bitwise reading of a stream
            </summary>
        </member>
        <member name="T:AlphaTab.IO.IReadable">
            <summary>
            Represents a stream of binary data that can be read from. 
            </summary>
        </member>
        <member name="P:AlphaTab.IO.IReadable.Position">
            <summary>
            Gets or sets the current read position relative in the stream. 
            </summary>
        </member>
        <member name="P:AlphaTab.IO.IReadable.Length">
            <summary>
            Gets the total number of bytes contained in the stream. 
            </summary>
        </member>
        <member name="M:AlphaTab.IO.IReadable.Reset">
            <summary>
            Resets the stream for reading the data from the beginning. 
            </summary>
        </member>
        <member name="M:AlphaTab.IO.IReadable.Skip(System.Int32)">
            <summary>
            Skip the given number of bytes. 
            </summary>
            <param name="offset">The number of bytes to skip. </param>
        </member>
        <member name="M:AlphaTab.IO.IReadable.ReadByte">
            <summary>
            Read a single byte from the data stream. 
            </summary>
            <returns>The value of the next byte or -1 if there is no more data. </returns>
        </member>
        <member name="M:AlphaTab.IO.IReadable.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the given number of bytes from the stream into the given buffer. 
            </summary>
            <param name="buffer">The buffer to fill. </param>
            <param name="offset">The offset in the buffer where to start writing. </param>
            <param name="count">The number of bytes to read. </param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.IO.IReadable.ReadAll">
            <summary>
            Reads the remaining data. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.IO.IWriteable">
            <summary>
            Represents a writer where binary data can be written to. 
            </summary>
        </member>
        <member name="M:AlphaTab.IO.IWriteable.WriteByte(System.Byte)">
            <summary>
            Write a single byte to the stream. 
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:AlphaTab.IO.IWriteable.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data from the given buffer. 
            </summary>
            <param name="buffer">The buffer to get the data from. </param>
            <param name="offset">The offset where to start reading the data.</param>
            <param name="count">The number of bytes to write</param>
        </member>
        <member name="T:AlphaTab.IO.ZipEntry">
            <summary>
            this public class represents a file within the GpxFileSystem
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.ICanvas">
            <summary>
            This is the base public interface for canvas implementations on different plattforms.
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.IPathCanvas">
            <summary>
            This is the path drawing API for canvas implementations
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Model.Color">
            <summary>
            A color object which allows accessing each color component individually. 
            </summary>
        </member>
        <member name="F:AlphaTab.Platform.Model.Color.BlackRgb">
            <summary>
            Gets the hex string for black. 
            </summary>
        </member>
        <member name="M:AlphaTab.Platform.Model.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Platform.Model.Color"/> class.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="P:AlphaTab.Platform.Model.Color.Raw">
            <summary>
            Gets or sets the raw RGBA value. 
            </summary>
        </member>
        <member name="P:AlphaTab.Platform.Model.Color.A">
            <summary>
            Gets or sets the alpha component of the color. 
            </summary>
        </member>
        <member name="P:AlphaTab.Platform.Model.Color.R">
            <summary>
            Gets or sets the red component of the color. 
            </summary>
        </member>
        <member name="P:AlphaTab.Platform.Model.Color.G">
            <summary>
            Gets or sets the green component of the color. 
            </summary>
        </member>
        <member name="P:AlphaTab.Platform.Model.Color.B">
            <summary>
            Gets or sets the blue component of the color. 
            </summary>
        </member>
        <member name="P:AlphaTab.Platform.Model.Color.RGBA">
            <summary>
            Gets the RGBA hex string to use in CSS areas. 
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Model.Font">
            <summary>
            This container public class can store the definition for a font and it's style.
            </summary>
        </member>
        <member name="P:AlphaTab.Platform.Model.Font.Family">
            <summary>
            Gets or sets the font family name. 
            </summary>
        </member>
        <member name="P:AlphaTab.Platform.Model.Font.Size">
            <summary>
            Gets or sets the font size in pixels. 
            </summary>
        </member>
        <member name="P:AlphaTab.Platform.Model.Font.Style">
            <summary>
            Gets or sets the font style. 
            </summary>
        </member>
        <member name="P:AlphaTab.Platform.Model.Font.IsBold">
            <summary>
            Gets a value indicating whether the font is bold. 
            </summary>
        </member>
        <member name="P:AlphaTab.Platform.Model.Font.IsItalic">
            <summary>
            Gets a value indicating whether the font is italic. 
            </summary>
        </member>
        <member name="M:AlphaTab.Platform.Model.Font.#ctor(System.String,System.Single,AlphaTab.Platform.Model.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Platform.Model.Font"/> class.
            </summary>
            <param name="family">The family.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="T:AlphaTab.Platform.Model.FontStyle">
            <summary>
            Lists all flags for font styles. 
            </summary>
        </member>
        <member name="F:AlphaTab.Platform.Model.FontStyle.Plain">
            <summary>
            No flags. 
            </summary>
        </member>
        <member name="F:AlphaTab.Platform.Model.FontStyle.Bold">
            <summary>
            Font is bold
            </summary>
        </member>
        <member name="F:AlphaTab.Platform.Model.FontStyle.Italic">
            <summary>
            Font is italic. 
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Model.TextAlign">
            <summary>
            This public enum lists all different text alignments
            </summary>
        </member>
        <member name="F:AlphaTab.Platform.Model.TextAlign.Left">
            <summary>
            Text is left aligned. 
            </summary>
        </member>
        <member name="F:AlphaTab.Platform.Model.TextAlign.Center">
            <summary>
            Text is centered. 
            </summary>
        </member>
        <member name="F:AlphaTab.Platform.Model.TextAlign.Right">
            <summary>
            Text is right aligned. 
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Model.TextBaseline">
            <summary>
            This public enum lists all base line modes
            </summary>
        </member>
        <member name="F:AlphaTab.Platform.Model.TextBaseline.Top">
            <summary>
            Text is aligned on top. 
            </summary>
        </member>
        <member name="F:AlphaTab.Platform.Model.TextBaseline.Middle">
            <summary>
            Text is aligned middle
            </summary>
        </member>
        <member name="F:AlphaTab.Platform.Model.TextBaseline.Bottom">
            <summary>
            Text is aligend on the bottom. 
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Svg.FontSizes">
            <summary>
            This public class stores text widths for several fonts and allows width calculation 
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Svg.CssFontSvgCanvas">
            <summary>
            This SVG canvas renders the music symbols by adding a CSS class 'at' to all elements. 
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Svg.SvgCanvas">
            <summary>
             A canvas implementation storing SVG data
            </summary>
        </member>
        <member name="T:AlphaTab.Settings">
            <summary>
            This public class contains instance specific settings for alphaTab
            </summary>
            <summary>
            This public class contains instance specific settings for alphaTab
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Scale">
            <summary>
            Sets the zoom level of the rendered notation
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Width">
            <summary>
            The initial size of the canvas during loading or the width for particular layouts (e.g. page layout).
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Engine">
            <summary>
            The engine which should be used to render the the tablature. 
            <ul>
             <li><strong>default</strong> - Platform specific default engine</li>
             <li><strong>html5</strong> - HTML5 Canvas</li>
             <li><strong>svg</strong> -  SVG </li>
            </ul>
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Layout">
            <summary>
            The layout specific settings
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ImporterSettings">
            <summary>
            Specific settings for importers. Keys are specific for the importers. 
            <strong>General</strong>
            <ul>
             <li><strong>encoding</strong> - The text encoding to use when decoding strings (string, default:utf-8)</li>
            </ul>
            <strong>MusicXML</strong>
            <ul>
             <li><strong>musicxmlMergePartGroups</strong> - If part-groups should be merged into a single track (boolean, default:false)</li>
            </ul>
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.StretchForce">
            <summary>
            The default stretch force to use for layouting. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ForcePianoFingering">
            <summary>
            Forces the fingering rendering to use always the piano finger stýle where 
            fingers are rendered as 1-5 instead of p,i,m,a,c and T,1,2,3,4.
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Staves">
            <summary>
            The staves that should be shown in the music sheet. 
            This is one of the profiles registered in the <see cref="F:AlphaTab.Environment.StaveProfiles"/>
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.TranspositionPitches">
            <summary>
            The transposition pitch offsets for the individual tracks. 
            They apply to rendering and playback.
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.DisplayTranspositionPitches">
            <summary>
            The transposition pitch offsets for the individual tracks. 
            They apply to rendering only.
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.LogLevel">
            <summary>
            The log level to use within alphaTab
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.SmallGraceTabNotes">
            <summary>
            If set to true the guitar tabs on grace beats are rendered smaller.
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ExtendBendArrowsOnTiedNotes">
            <summary>
            If set to true bend arrows expand to the end of the last tied note
            of the string. Otherwise they end on the next beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ShowParenthesisForTiedBends">
            <summary>
            If set to true the note heads on tied notes
            will have parenthesis if they are preceeded by bends. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ShowTabNoteOnTiedBend">
            <summary>
            If set to true a tab number will be shown in case
            a bend is increased on a tied note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.DisplayMode">
            <summary>
            Gets or sets the mode to use for display and play music notation elements.
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.FingeringMode">
            <summary>
            Gets or sets the fingering mode to use. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ShowZeroOnDiveWhammy">
            <summary>
            If set to true, 0 is shown on dive whammy bars. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ExtendLineEffectsToBeatEnd">
            <summary>
            If set to true, line effects (like w/bar, let-ring etc)
            are drawn until the end of the beat instead of the start. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Vibrato">
            <summary>
            Gets or sets the settings on how the vibrato audio is generated. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.SlurHeight">
            <summary>
            Gets or sets the height for slurs. The factor is multiplied with the a logarithmic distance
            between slur start and end.
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.SongBookBendDuration">
            <summary>
            Gets or sets the bend duration in milliseconds for songbook bends. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.SongBookDipDuration">
            <summary>
            Gets or sets the duration of whammy dips in milliseconds for songbook whammys. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.IncludeNoteBounds">
            <summary>
            Gets or sets whether in the <see cref="T:AlphaTab.Rendering.Utils.BoundsLookup"/> also the
            position and area of each individual note is provided. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.UseWorkers">
            <summary>
            Gets or sets whether the rendering should be done in a worker if possible.
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.EnablePlayer">
            <summary>
            Gets or sets whether the player should be enabled.
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.EnableCursor">
            <summary>
            Gets or sets whether playback cursors should be displayed. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.BeatCursorWidth">
            <summary>
            Gets or sets the width of the beat cursor in pixels. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ScrollOffsetX">
            <summary>
            Gets or sets the X-offset to add when scrolling. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ScrollOffsetY">
            <summary>
            Gets or sets the Y-offset to add when scrolling
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ScrollMode">
            <summary>
            Gets or sets the mode how to scroll. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ScrollSpeed">
            <summary>
            Gets or sets how fast the scrolling to the new position should happen (in milliseconds)
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.RenderingResources">
            <summary>
            Gets or sets the resources used during rendering. This defines all fonts and colors used. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.SongBook">
            <summary>
            Gets the default settings for the songbook display mode. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Defaults">
            <summary>
            Gets the default settings.
            </summary>
        </member>
        <member name="T:AlphaTab.ResizeEventArgs">
            <summary>
            Represents the information related to a resize event. 
            </summary>
        </member>
        <member name="P:AlphaTab.ResizeEventArgs.OldWidth">
            <summary>
            Gets the size before the resizing happened. 
            </summary>
        </member>
        <member name="P:AlphaTab.ResizeEventArgs.NewWidth">
            <summary>
            Gets the size after the resize was complete. 
            </summary>
        </member>
        <member name="P:AlphaTab.ResizeEventArgs.Settings">
            <summary>
            Gets the settings currently used for rendering. 
            </summary>
        </member>
        <member name="T:AlphaTab.AlphaTabApi`1">
            <summary>
            This class represents the public API of alphaTab and provides all logic to display
            a music sheet in any UI using the given <see cref="T:AlphaTab.UI.IUiFacade`1"/>
            </summary>
            <typeparam name="TSettings">The UI object holding the settings.</typeparam>
        </member>
        <member name="P:AlphaTab.AlphaTabApi`1.UiFacade">
            <summary>
            Gets the UI facade to use for interacting with the user interface.
            </summary>
        </member>
        <member name="P:AlphaTab.AlphaTabApi`1.Container">
            <summary>
            Gets the UI container that holds the whole alphaTab control.
            </summary>
        </member>
        <member name="P:AlphaTab.AlphaTabApi`1.CanvasElement">
            <summary>
            Gets the UI container that will hold all rendered results. 
            </summary>
        </member>
        <member name="P:AlphaTab.AlphaTabApi`1.Renderer">
            <summary>
            Gets the score renderer used for rendering the music sheet. This is the low-level API responsible for the actual rendering chain. 
            </summary>
        </member>
        <member name="P:AlphaTab.AlphaTabApi`1.AutoSize">
            <summary>
            Gets a value indicating whether auto-sizing is active and the music sheet will be re-rendered on resize. 
            </summary>
        </member>
        <member name="P:AlphaTab.AlphaTabApi`1.Score">
            <summary>
            Gets the score holding all information about the song being rendered. 
            </summary>
        </member>
        <member name="P:AlphaTab.AlphaTabApi`1.TrackIndexes">
            <summary>
            Gets the indexes of the tracks that should be rendered of the currently set score. 
            </summary>
        </member>
        <member name="P:AlphaTab.AlphaTabApi`1.Settings">
            <summary>
            Gets the settings that are used for rendering the music notation.
            </summary>
        </member>
        <member name="P:AlphaTab.AlphaTabApi`1.Tracks">
            <summary>
            Gets a list of the tracks that should be rendered based on <see cref="P:AlphaTab.AlphaTabApi`1.Score"/> and <see cref="P:AlphaTab.AlphaTabApi`1.TrackIndexes"/>
            </summary>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.#ctor(AlphaTab.UI.IUiFacade{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.AlphaTabApi`1"/> class.
            </summary>
            <param name="uiFacade">The UI facade to use for interacting with the user interface.</param>
            <param name="settings">The UI settings object to use for loading the settings.</param>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.Destroy">
            <summary>
            Destroys the alphaTab control and restores the initial state of the UI. 
            </summary>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.TrackIndexesToTracks(System.Int32[])">
            <summary>
            Maps the given list of track indexes to tracks using the current <see cref="P:AlphaTab.AlphaTabApi`1.Score"/>
            </summary>
            <param name="trackIndexes">The indexes of the tracks.</param>
            <returns>A list of Tracks that are available in the current <see cref="P:AlphaTab.AlphaTabApi`1.Score"/>.</returns>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.UpdateSettings">
            <summary>
            Applies any changes that were done to the settings object and informs the <see cref="P:AlphaTab.AlphaTabApi`1.Renderer"/> about any new values to consider. 
            </summary>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.RenderTracks(AlphaTab.Model.Score,System.Int32[],System.Boolean)">
            <summary>
            Initiates a rendering of the given tracks. 
            </summary>
            <param name="score">The data model holding the song information.</param>
            <param name="tracks">The indexes of the tracks to render.</param>
            <param name="invalidate">If set to true, a redrawing will be done as part of this call. </param>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.Tex(System.String,System.Int32[])">
            <summary>
            Tells alphaTab to render the given alphaTex. 
            </summary>
            <param name="contents">The alphaTex code to render.</param>
            <param name="tracks">If set, the given tracks will be rendered, otherwise the first track only will be rendered.</param>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.ScoreLoaded(AlphaTab.Model.Score,System.Boolean)">
            <summary>
            Performs any necessary steps that are needed after a new score was loaded/set. 
            </summary>
            <param name="score">The score that was loaded.</param>
            <param name="render">If set to true, a rerendering will be initiated as part of this call.</param>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.Render">
            <summary>
            Initiates a re-rendering of the current setup. If rendering is not yet possible, it will be deferred until the UI changes to be ready for rendering.
            </summary>
        </member>
        <member name="P:AlphaTab.AlphaTabApi`1.Player">
            <summary>
            Gets the alphaSynth player used for playback. This is the low-level API to the Midi synthesizer used for playback. 
            </summary>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.ChangeTrackVolume(AlphaTab.Model.Track[],System.Single)">
            <summary>
            Changes the volume of th given tracks. 
            </summary>
            <param name="tracks">The tracks for which the volume should be changed.</param>
            <param name="volume">The volume to set for all tracks in percent (0-1)</param>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.ChangeTrackSolo(AlphaTab.Model.Track[],System.Boolean)">
            <summary>
            Changes the given tracks to be played solo or not. 
            </summary>
            <param name="tracks">The list of tracks to play solo or not.</param>
            <param name="solo">If set to true, the tracks will be added to the solo list. If false, they are removed.</param>
            <remarks>
            If one or more tracks are set to solo, only those tracks are hearable.
            </remarks>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.ChangeTrackMute(AlphaTab.Model.Track[],System.Boolean)">
            <summary>
            Changes the given tracks to be muted or not. 
            </summary>
            <param name="tracks">The list of track to mute or unmute.</param>
            <param name="mute">If set to true, the tracks will be muted. If false they are unmuted.</param>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.Play">
            <summary>
            Starts the playback of the current song. 
            </summary>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.Pause">
            <summary>
            Pauses the playback of the current song.
            </summary>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.PlayPause">
            <summary>
            Toggles between play/pause depending on the current player state. 
            </summary>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.Stop">
            <summary>
            Stops the playback of the current song, and moves the playback position back to the start.
            </summary>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.CursorUpdateTick(System.Int32,System.Boolean)">
            <summary>
            updates the cursors to highlight the beat at the specified tick position
            </summary>
            <param name="tick"></param>
            <param name="stop"></param>
        </member>
        <member name="M:AlphaTab.AlphaTabApi`1.CursorUpdateBeat(AlphaTab.Model.Beat,AlphaTab.Model.Beat,System.Double,System.Boolean)">
            <summary>
            updates the cursors to highlight the specified beat
            </summary>
        </member>
        <member name="E:AlphaTab.AlphaTabApi`1.PlayedBeatChanged">
            <summary>
            This event is fired whenever a new beat is played. 
            </summary>
        </member>
        <member name="E:AlphaTab.AlphaTabApi`1.Loaded">
            <summary>
            This event is fired whenever a new song is loaded. 
            </summary>
        </member>
        <member name="E:AlphaTab.AlphaTabApi`1.Resize">
            <summary>
            This event is fired when alphaTab was resized and is about to rerender the music notation.
            </summary>
        </member>
        <member name="E:AlphaTab.AlphaTabApi`1.RenderFinished">
            <summary>
            This event is fired when the rendering of the whole music sheet is finished. 
            </summary>
        </member>
        <member name="E:AlphaTab.AlphaTabApi`1.PostRenderFinished">
            <summary>
            This event is fired when the rendering of the whole music sheet is finished, and all handlers of <see cref="E:AlphaTab.AlphaTabApi`1.RenderFinished"/> ran. 
            </summary>
        </member>
        <member name="T:AlphaTab.AlphaTabException">
            <summary>
            The base class for all errors that can happen in alphaTab. 
            </summary>
        </member>
        <member name="M:AlphaTab.AlphaTabException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.AlphaTabException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:AlphaTab.Exporter.AlphaTexExporter">
            <summary>
            This class allows converting scores into alphaTex. 
            </summary>
        </member>
        <member name="M:AlphaTab.Exporter.AlphaTexExporter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Exporter.AlphaTexExporter"/> class.
            </summary>
        </member>
        <member name="M:AlphaTab.Exporter.AlphaTexExporter.Export(AlphaTab.Model.Track)">
            <summary>
            Exports the given track. 
            </summary>
            <param name="track">The track to export</param>
        </member>
        <member name="M:AlphaTab.Exporter.AlphaTexExporter.ToTex">
            <summary>
            Returns the generated tex code. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Importer.AlphaTexImporter">
            <summary>
            This importer can parse alphaTex markup into a score structure. 
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.CreateDefaultScore">
            <summary>
            Initializes the song with some required default values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ParseClefFromString(System.String)">
            <summary>
            Converts a clef string into the clef value.
            </summary>
            <param name="str">the string to convert</param>
            <returns>the clef value</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ParseClefFromInt(System.Int32)">
            <summary>
            Converts a clef tuning into the clef value.
            </summary>
            <param name="i">the tuning value to convert</param>
            <returns>the clef value</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ParseKeySignature(System.String)">
            <summary>
            Converts a keysignature string into the assocciated value.
            </summary>
            <param name="str">the string to convert</param>
            <returns>the assocciated keysignature value</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.NextChar">
            <summary>
            Reads the next character of the source stream.
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.NewSy">
            <summary>
            Reads the next terminal symbol.
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.IsLetter(System.Int32)">
            <summary>
            Checks if the given character is a letter.
            (no control characters, whitespaces, numbers or dots)
            </summary>
            <param name="code">the character</param>
            <returns>true if the given character is a letter, otherwise false.</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.IsTerminal(System.Int32)">
            <summary>
            Checks if the given charater is a non terminal.
            </summary>
            <param name="ch">the character</param>
            <returns>true if the given character is a terminal, otherwise false.</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.IsDigit(System.Int32)">
            <summary>
            Checks if the given character is a digit. 
            </summary>
            <param name="code">the character</param>
            <returns>true if the given character is a digit, otherwise false.</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ReadName">
            <summary>
            Reads a string from the stream.
            </summary>
            <returns>the read string.</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ReadNumber">
            <summary>
            Reads a number from the stream.
            </summary>
            <returns>the read number.</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ApplyBeatEffect(AlphaTab.Model.Beat)">
            <summary>
            Tries to apply a beat effect to the given beat.
            </summary>
            <returns>true if a effect could be applied, otherwise false</returns>
        </member>
        <member name="T:AlphaTab.Importer.AlphaTexSymbols">
            <summary>
            A list of terminals recognized by the alphaTex-parser
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.BinaryStylesheetParser">
             <summary>
             A parser for the BinaryStylesheet file of Guitar Pro 6 and 7. 
             </summary>
             <remarks>
             The BinaryStylesheet is a simple binary key-value store.
            
             File: 
                 int32 (big endian) | Number of KeyValuePairs
                 KeyValuePair[]     | The raw records 
            
             KeyValuePair:
                 1 Byte  | length of the key
                 n Bytes | key as utf8 encoded string
                 1 Byte  | Data Type
                 n Bytes | Value
            
             Values based on Data Type:
                 0 = bool
                     0 == false
                 1 = int32 (big endian)
                 2 = float (big endian, IEEE)
                 3 = string
                   int16 (big endian) | length of string
                   n bytes            | utf-8 encoded string
                 4 = point
                   int32 (big endian) | X-coordinate
                   int32 (big endian) | Y-coordinate
                 5 = size
                   int32 (big endian) | Width
                   int32 (big endian) | Height
                 6 = rectangle
                   int32 (big endian) | X-coordinate
                   int32 (big endian) | Y-coordinate
                   int32 (big endian) | Width
                   int32 (big endian) | Height
                 7 = color
                   1 byte | Red
                   1 byte | Green
                   1 byte | Blue
                   1 byte | Alpha
             </remarks>
        </member>
        <member name="M:AlphaTab.Importer.GpBinaryHelpers.GpReadStringIntUnused(AlphaTab.IO.IReadable,System.String)">
            <summary>
             Skips an integer (4byte) and reads a string using 
             a bytesize
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.GpBinaryHelpers.GpReadStringInt(AlphaTab.IO.IReadable,System.String)">
            <summary>
            Reads an integer as size, and then the string itself
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.GpBinaryHelpers.GpReadStringIntByte(AlphaTab.IO.IReadable,System.String)">
            <summary>
            Reads an integer as size, skips a byte and reads the string itself
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.GpBinaryHelpers.GpReadStringByteLength(AlphaTab.IO.IReadable,System.Int32,System.String)">
            <summary>
            Reads a byte as size and the string itself.
            Additionally it is ensured the specified amount of bytes is read. 
            </summary>
            <param name="data">the data to read from.</param>
            <param name="length">the amount of bytes to read</param>
            <param name="encoding">The encoding to use to decode the byte into a string</param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Importer.GpxFile">
            <summary>
            this public class represents a file within the GpxFileSystem
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.GpxFileSystem">
            <summary>
            This public class represents the file system structure
            stored within a GPX container file. 
            </summary>
        </member>
        <member name="P:AlphaTab.Importer.GpxFileSystem.FileFilter">
            <summary>
            You can set a file filter method using this setter. On parsing
            the filestructure this function can determine based on the filename 
            whether this file will be available after loading. 
            This way we can reduce the amount of memory we store.
            </summary>
        </member>
        <member name="P:AlphaTab.Importer.GpxFileSystem.Files">
            <summary>
            Gets the list of files stored in this FileSystem.
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.#ctor">
            <summary>
            Creates a new GpxFileSystem instance
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.Load(AlphaTab.IO.IReadable)">
            <summary>
            Load a complete FileSystem to the memory.
            </summary>
            <param name="s">the binary source to read from.</param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.ReadHeader(AlphaTab.IO.BitReader)">
            <summary>
            Reads the 4 byte header as a string.
            </summary>
            <param name="src">the BitInput to read from</param>
            <returns>a string with 4 characters representing the header.</returns>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.Decompress(AlphaTab.IO.BitReader,System.Boolean)">
            <summary>
            Decompresses the given bitinput using the GPX compression format. Only use this method
            if you are sure the binary data is compressed using the GPX format. Otherwise unexpected
            behavior can occure. 
            </summary>
            <param name="src">the bitInput to read the data from</param>
            <param name="skipHeader">true if the header should NOT be included in the result byteset, otherwise false</param>
            <returns>the decompressed byte data. if skipHeader is set to false the BCFS header is included.</returns>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.ReadBlock(AlphaTab.IO.BitReader)">
            <summary>
            Reads a block from the given data source.
            </summary>
            <param name="data">the data source</param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.ReadUncompressedBlock(System.Byte[])">
            <summary>
            Reads an uncompressed data block into the model.
            </summary>
            <param name="data">the data store to read from.</param>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a zeroterminated ascii string from the given source
            </summary>
            <param name="data">the data source to read from</param>
            <param name="offset">the offset to start reading from</param>
            <param name="length">the max length to read</param>
            <returns>the ascii string read from the datasource.</returns>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.GetInteger(System.Byte[],System.Int32)">
            <summary>
            Reads an 4 byte signed integer from the given source
            </summary>
            <param name="data">the data source to read from </param>
            <param name="offset">offset the offset to start reading from</param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Importer.Gp7Importer">
            <summary>
            This ScoreImporter can read Guitar Pro 7 (gp) files.
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.GpxImporter">
            <summary>
            This ScoreImporter can read Guitar Pro 6 (gpx) files.
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.GpifRhythm">
            <summary>
            This structure represents a duration within a gpif model.
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.GpifParser">
            <summary>
            This public class can parse a score.gpif xml file into the model structure
            </summary>
        </member>
        <member name="F:AlphaTab.Importer.GpifParser.BendPointPositionFactor">
            <summary>
            GPX range: 0-100
            Internal range: 0 - 60
            </summary>
        </member>
        <member name="F:AlphaTab.Importer.GpifParser.BendPointValueFactor">
            <summary>
            GPIF: 25 per quarternote
            Internal Range: 1 per quarter note
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.MixTableChange">
            <summary>
            A mixtablechange describes several track changes. 
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.NoCompatibleReaderFoundException">
            <summary>
            An exception indicating no reader for importing a file could be found. 
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.NoCompatibleReaderFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Importer.NoCompatibleReaderFoundException"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.ScoreImporter">
            <summary>
            This is the base public class for creating new song importers which 
            enable reading scores from any binary datasource
            </summary>
        </member>
        <member name="F:AlphaTab.Importer.ScoreImporter.Data">
            <summary>
            The raw data to read from. 
            </summary>
        </member>
        <member name="F:AlphaTab.Importer.ScoreImporter.Settings">
            <summary>
            The settings to use during the import. 
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.ScoreImporter.BuildImporters">
            Gets all default ScoreImporters
            @return
        </member>
        <member name="M:AlphaTab.Importer.ScoreImporter.Init(AlphaTab.IO.IReadable,AlphaTab.Settings)">
            <summary>
            Initializes the importer with the given data and settings. 
            </summary>
            <param name="data"></param>
            <param name="settings"></param>
        </member>
        <member name="M:AlphaTab.Importer.ScoreImporter.GetSetting``1(System.String,``0)">
            <summary>
            Gets the importer specific setting using the specified key. 
            </summary>
            <param name="key">The key of the setting to load the value for.</param>
            <param name="defaultValue">The default value to load if no setting was specified. </param>
            <returns>The importer setting specified by the user, or the given defaultValue if the key was not contained.</returns>
        </member>
        <member name="P:AlphaTab.Importer.ScoreImporter.Name">
            <summary>
            Get the human readable name of the importer. 
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.ScoreImporter.ReadScore">
            <summary>
            Reads the <see cref="T:AlphaTab.Model.Score"/> contained in the data. 
            </summary>
            <returns>The score that was contained in the data. </returns>
        </member>
        <member name="T:AlphaTab.Importer.ScoreLoader">
            <summary>
            The ScoreLoader enables you easy loading of Scores using all 
            available importers
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.ScoreLoader.LoadScoreFromBytes(System.Byte[],AlphaTab.Settings)">
            <summary>
            Loads the score from the given binary data. 
            </summary>
            <param name="data">The binary data containing a score in any known file format. </param>
            <param name="settings">The settings to use during importing. </param>
            <returns>The loaded score.</returns>
        </member>
        <member name="T:AlphaTab.Importer.UnsupportedFormatException">
            <summary>
            The exception thrown by a <see cref="T:AlphaTab.Importer.ScoreImporter"/> in case the
            binary data does not contain a reader compatible structure. 
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.UnsupportedFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Importer.UnsupportedFormatException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:AlphaTab.Model.AccentuationType">
            <summary>
            Lists all types of note acceuntations
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AccentuationType.None">
            <summary>
            No accentuation
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AccentuationType.Normal">
            <summary>
            Normal accentuation 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AccentuationType.Heavy">
            <summary>
            Heavy accentuation
            </summary>
        </member>
        <member name="T:AlphaTab.Model.AccidentalType">
            <summary>
            Defines all possible accidentals for notes.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AccidentalType.None">
            <summary>
            No accidental
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AccidentalType.Natural">
            <summary>
            Naturalize 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AccidentalType.Sharp">
            <summary>
            Sharp
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AccidentalType.Flat">
            <summary>
            Flat
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AccidentalType.NaturalQuarterNoteUp">
            <summary>
            Natural for smear bends
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AccidentalType.SharpQuarterNoteUp">
            <summary>
            Sharp for smear bends
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AccidentalType.FlatQuarterNoteUp">
            <summary>
            Flat for smear bends
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Automation">
            <summary>
            Automations are used to change the behaviour of a song.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Automation.IsLinear">
            <summary>
            Gets or sets whether the automation is applied linear. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Automation.Type">
            <summary>
            Gets or sets the type of the automation. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Automation.Value">
            <summary>
            Gets or sets the target value of the automation. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Automation.RatioPosition">
            <summary>
            Gets or sets the relative position of of the automation. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Automation.Text">
            <summary>
            Gets or sets the additional text of the automation. s
            </summary>
        </member>
        <member name="T:AlphaTab.Model.AutomationType">
            <summary>
            This public enumeration lists all types of automations.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AutomationType.Tempo">
            <summary>
            Tempo change. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AutomationType.Volume">
            <summary>
            Colume change. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AutomationType.Instrument">
            <summary>
            Instrument change.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.AutomationType.Balance">
            <summary>
            Balance change.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Bar">
            <summary>
            A bar is a single block within a track, also known as Measure.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Bar.GlobalBarId">
            <summary>
            This is a global counter for all beats. We use it 
            at several locations for lookup tables. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.Id">
            <summary>
            Gets or sets the unique id of this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.Index">
            <summary>
            Gets or sets the zero-based index of this bar within the staff. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.NextBar">
            <summary>
            Gets or sets the next bar that comes after this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.PreviousBar">
            <summary>
            Gets or sets the previous bar that comes before this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.Clef">
            <summary>
            Gets or sets the clef on this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.ClefOttava">
            <summary>
            Gets or sets the ottava applied to the clef. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.Staff">
            <summary>
            Gets or sets the reference to the parent staff. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.Voices">
            <summary>
            Gets or sets the list of voices contained in this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.SimileMark">
            <summary>
            Gets or sets the simile mark on this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.MasterBar">
            <summary>
            Gets the masterbar for this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Bar.IsEmpty">
            <summary>
            Gets a value indicating whether all voices in this bar are empty and therefore the whole bar is empty. 
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Bar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.Bar"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Beat">
            <summary>
            A beat is a single block within a bar. A beat is a combination
            of several notes played at the same time. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Beat.GlobalBeatId">
            <summary>
            This is a global counter for all beats. We use it 
            at several locations for lookup tables. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Id">
            <summary>
            Gets or sets the unique id of this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Index">
            <summary>
            Gets or sets the zero-based index of this beat within the voice. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.PreviousBeat">
            <summary>
            Gets or sets the previous beat within the whole song.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.NextBeat">
            <summary>
            Gets or sets the next beat within the whole song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.IsLastOfVoice">
            <summary>
            Gets a value indicating whether this beat is the last beat in the voice. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Voice">
            <summary>
            Gets or sets the reference to the parent voice this beat belongs to. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Notes">
            <summary>
            Gets or sets the list of notes contained in this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.NoteStringLookup">
            <summary>
            Gets the lookup where the notes per string are registered.
            If this staff contains string based notes this lookup allows fast access. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.NoteValueLookup">
            <summary>
            Gets the lookup where the notes per value are registered.
            If this staff contains string based notes this lookup allows fast access. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this beat is considered empty. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.WhammyStyle">
            <summary>
            Gets or sets which whammy bar style should be used for this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Ottava">
            <summary>
            Gets or sets the ottava applied to this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Fermata">
            <summary>
            Gets or sets the fermata applied to this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.IsLegatoOrigin">
            <summary>
            Gets a value indicating whether this beat starts a legato slur. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.IsLegatoDestination">
            <summary>
            Gets a value indicating whether this beat ends a legato slur. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.MinNote">
            <summary>
            Gets or sets the note with the lowest pitch in this beat. Only visible notes are considered.  
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.MaxNote">
            <summary>
            Gets or sets the note with the highest pitch in this beat. Only visible notes are considered. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.MaxStringNote">
            <summary>
            Gets or sets the note with the highest string number in this beat. Only visible notes are considered.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.MinStringNote">
            <summary>
            Gets or sets the note with the lowest string number in this beat. Only visible notes are considered.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Duration">
            <summary>
            Gets or sets the duration of this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.IsRest">
            <summary>
            Gets or sets whether this beat is considered as rest.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.IsLetRing">
            <summary>
            Gets or sets whether any note in this beat has a let-ring applied. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.IsPalmMute">
            <summary>
            Gets or sets whether any note in this beat has a palm-mute paplied. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Automations">
            <summary>
            Gets or sets a list of all automations on this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Dots">
            <summary>
            Gets or sets the number of dots applied to the duration of this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.FadeIn">
            <summary>
            Gets or sets a value indicating whether this beat is fade-in. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Lyrics">
            <summary>
            Gets or sets the lyrics shown on this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.HasRasgueado">
            <summary>
            Gets or sets a value indicating whether the beat is played in rasgueado style. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Pop">
            <summary>
            Gets or sets a value indicating whether the notes on this beat are played with a pop-style (bass).
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Slap">
            <summary>
            Gets or sets a value indicating whether the notes on this beat are played with a slap-style (bass).
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Tap">
            <summary>
            Gets or sets a value indicating whether the notes on this beat are played with a tap-style (bass).
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Text">
            <summary>
            Gets or sets the text annotation shown on this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.BrushType">
            <summary>
            Gets or sets the brush type applied to the notes of this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.BrushDuration">
            <summary>
            Gets or sets the duration of the brush between the notes in midi ticks. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.TupletDenominator">
            <summary>
            Gets or sets the tuplet denominator.
            </summary>re
        </member>
        <member name="P:AlphaTab.Model.Beat.TupletNumerator">
            <summary>
            Gets or sets the tuplet numerator. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.HasTuplet">
            <summary>
            Gets or sets whether there is a tuplet applied to the duration of this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.IsContinuedWhammy">
            <summary>
            Gets or sets whether this beat continues a whammy effect. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.WhammyBarType">
            <summary>
            Gets or sets the whammy bar style of this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.WhammyBarPoints">
            <summary>
            Gets or sets the points defining the whammy bar usage. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.MaxWhammyPoint">
            <summary>
            Gets or sets the highest point with for the highest whammy bar value. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.MinWhammyPoint">
            <summary>
            Gets or sets the highest point with for the lowest whammy bar value. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.HasWhammyBar">
            <summary>
            Gets a value indicating whether a whammy bar is used on this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Vibrato">
            <summary>
            Gets or sets the vibrato effect used on this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.ChordId">
            <summary>
            Gets or sets the ID of the chord used on this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.HasChord">
            <summary>
            Gets a value indicating whether a chord is used on this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Chord">
            <summary>
            Gets the chord used on this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.GraceType">
            <summary>
            Gets or sets the grace style of this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.PickStroke">
            <summary>
            Gets or sets the pickstroke applied on this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.IsTremolo">
            <summary>
            Gets whether a tremolo effect is played on this beat.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.TremoloSpeed">
            <summary>
            Gets or sets the speed of the tremolo effect. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Crescendo">
            <summary>
            Gets or sets whether a crescendo/decrescendo is applied on this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.DisplayStart">
            <summary>
            The timeline position of the voice within the current bar as it is displayed. (unit: midi ticks)
            </summary>
            <remarks>
            This might differ from the actual playback time due to special grace types. 
            </remarks>
        </member>
        <member name="P:AlphaTab.Model.Beat.PlaybackStart">
            <summary>
            The timeline position of the voice within the current bar as it is played. (unit: midi ticks)
            </summary>
            <remarks>
            This might differ from the actual playback time due to special grace types. 
            </remarks>
        </member>
        <member name="P:AlphaTab.Model.Beat.DisplayDuration">
            <summary>
            Gets or sets the duration that is used for the display of this beat. It defines the size/width of the beat in
            the music sheet. (unit: midi ticks).
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.PlaybackDuration">
            <summary>
            Gets or sets the duration that the note is played during the audio generation.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.AbsoluteDisplayStart">
            <summary>
            Gets the absolute display start time within the song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.AbsolutePlaybackStart">
            <summary>
            Gets the absolute playback start time within the song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Dynamic">
            <summary>
            Gets or sets the dynamics applied to this beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.InvertBeamDirection">
            <summary>
            Gets or sets a value indicating whether the beam direction should be inverted. 
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Beat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.Beat"/> class.
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Beat.IsBefore(AlphaTab.Model.Beat)">
            <summary>
            Checks whether the current beat is timewise before the given beat. 
            </summary>
            <param name="beat"></param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Model.Beat.IsAfter(AlphaTab.Model.Beat)">
            <summary>
            Checks whether the current beat is timewise after the given beat. 
            </summary>
            <param name="beat"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Model.BendPoint">
            <summary>
            A single point of a bending graph. Used to 
            describe WhammyBar and String Bending effects.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendPoint.MaxPosition">
            <summary>
            The maximum offset for points
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendPoint.MaxValue">
            <summary>
            The maximum value for points. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.BendPoint.Offset">
            <summary>
            Gets or sets offset of the point relative to the note duration (0-60)
            </summary>
        </member>
        <member name="P:AlphaTab.Model.BendPoint.Value">
            <summary>
            Gets or sets the 1/4 note value offsets for the bend. 
            </summary>
        </member>
        <member name="M:AlphaTab.Model.BendPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.BendPoint"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:AlphaTab.Model.BendStyle">
            <summary>
            Lists the different bend styles
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendStyle.Default">
            <summary>
            The bends are as described by the bend points 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendStyle.Gradual">
            <summary>
            The bends are gradual over the beat duration. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendStyle.Fast">
            <summary>
            The bends are done fast before the next note. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.BendType">
            <summary>
            Lists all types of bends 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendType.None">
            <summary>
            No bend at all
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendType.Custom">
            <summary>
            Individual points define the bends in a flexible manner. 
            This system was mainly used in Guitar Pro 3-5
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendType.Bend">
            <summary>
            Simple Bend from an unbended string to a higher note. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendType.Release">
            <summary>
            Release of a bend that was started on an earlier note.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendType.BendRelease">
            <summary>
            A bend that starts from an unbended string, 
            and also releases the bend after some time.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendType.Hold">
            <summary>
            Holds a bend that was started on an earlier note
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendType.Prebend">
            <summary>
            A bend that is already started before the note is played then it is held until the end. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendType.PrebendBend">
            <summary>
            A bend that is already started before the note is played and
            bends even further, then it is held until the end. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BendType.PrebendRelease">
            <summary>
            A bend that is already started before the note is played and
            then releases the bend to a lower note where it is held until the end.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.BrushType">
            <summary>
            Lists all types of how to brush multiple notes on a beat. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BrushType.None">
            <summary>
            No brush. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BrushType.BrushUp">
            <summary>
            Normal brush up. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BrushType.BrushDown">
            <summary>
            Normal brush down. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BrushType.ArpeggioUp">
            <summary>
            Arpeggio up. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.BrushType.ArpeggioDown">
            <summary>
            Arpeggio down. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Chord">
            <summary>
            A chord definition.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.Name">
            <summary>
            Gets or sets the name of the chord
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.FirstFret">
            <summary>
            Indicates the first fret of the chord diagram.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.Strings">
            <summary>
            Gets or sets the frets played on the individual strings for this chord. 
            - The order in this list goes from the highest string to the lowest string.  
            - -1 indicates that the string is not played. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.BarreFrets">
            <summary>
            Gets or sets a list of frets where the finger should hold a barre 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.Staff">
            <summary>
            Gets or sets the staff the chord belongs to. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.ShowName">
            <summary>
            Gets or sets whether the chord name is shown above the chord diagram. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.ShowDiagram">
            <summary>
            Gets or sets whether the chord diagram is shown.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.ShowFingering">
            <summary>
            Gets or sets whether the fingering is shown below the chord diagram. 
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Chord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.Chord"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Clef">
            <summary>
            This public enumeration lists all supported Clefs.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Clef.Neutral">
            <summary>
            Neutral clef.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Clef.C3">
            <summary>
            C3 clef
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Clef.C4">
            <summary>
            C4 clef
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Clef.F4">
            <summary>
            F4 clef
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Clef.G2">
            <summary>
            G2 clef
            </summary>
        </member>
        <member name="T:AlphaTab.Model.CrescendoType">
            <summary>
            Lists all Crescendo and Decrescendo types. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.CrescendoType.None">
            <summary>
            No crescendo applied. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.CrescendoType.Crescendo">
            <summary>
            Normal crescendo applied. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.CrescendoType.Decrescendo">
            <summary>
            Normal decrescendo applied. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Duration">
            <summary>
            Lists all durations of a beat.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.QuadrupleWhole">
            <summary>
            A quadruple whole note duration 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.DoubleWhole">
            <summary>
            A double whole note duration 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.Whole">
            <summary>
            A whole note duration 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.Half">
            <summary>
            A 1/2 note duration 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.Quarter">
            <summary>
            A 1/4 note duration 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.Eighth">
            <summary>
            A 1/8 note duration 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.Sixteenth">
            <summary>
            A 1/16 note duration 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.ThirtySecond">
            <summary>
            A 1/32 note duration 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.SixtyFourth">
            <summary>
            A 1/64 note duration 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.OneHundredTwentyEighth">
            <summary>
            A 1/128 note duration 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Duration.TwoHundredFiftySixth">
            <summary>
            A 1/256 note duration 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.DynamicValue">
            <summary>
            Lists all dynamics.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.DynamicValue.PPP">
            <summary>
            pianississimo (very very soft)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.DynamicValue.PP">
            <summary>
            pianissimo (very soft)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.DynamicValue.P">
            <summary>
            piano (soft)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.DynamicValue.MP">
            <summary>
            mezzo-piano (half soft)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.DynamicValue.MF">
            <summary>
            mezzo-forte (half loud)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.DynamicValue.F">
            <summary>
            forte (loud)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.DynamicValue.FF">
            <summary>
            fortissimo (very loud)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.DynamicValue.FFF">
            <summary>
            fortississimo (very very loud)
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Fermata">
            <summary>
            Represents a fermata. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Fermata.Type">
            <summary>
            Gets or sets the type of fermata. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Fermata.Length">
            <summary>
            Gets or sets the actual lenght of the fermata. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.FermataType">
            <summary>
            Lists all types of fermatas
            </summary>
        </member>
        <member name="F:AlphaTab.Model.FermataType.Short">
            <summary>
            A short fermata (triangle symbol)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.FermataType.Medium">
            <summary>
            A medium fermata (round symbol)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.FermataType.Long">
            <summary>
            A long fermata (rectangular symbol)
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Fingers">
            <summary>
            Lists all fingers.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.Unknown">
            <summary>
            Unknown type (not documented)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.NoOrDead">
            <summary>
            No finger, dead note
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.Thumb">
            <summary>
            The thumb
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.IndexFinger">
            <summary>
            The index finger
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.MiddleFinger">
            <summary>
            The middle finger
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.AnnularFinger">
            <summary>
            The annular finger
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.LittleFinger">
            <summary>
            The little finger
            </summary>
        </member>
        <member name="T:AlphaTab.Model.GraceType">
            <summary>
            Lists all types of grace notes
            </summary>
        </member>
        <member name="F:AlphaTab.Model.GraceType.None">
            <summary>
            No grace, normal beat. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.GraceType.OnBeat">
            <summary>
            The beat contains on-beat grace notes. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.GraceType.BeforeBeat">
            <summary>
            The beat contains before-beat grace notes. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.GraceType.BendGrace">
            <summary>
            The beat contains very special bend-grace notes used in SongBook style displays.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.HarmonicType">
            <summary>
            Lists all harmonic types.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.HarmonicType.None">
            <summary>
            No harmonics. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.HarmonicType.Natural">
            <summary>
            Natural harmonic
            </summary>
        </member>
        <member name="F:AlphaTab.Model.HarmonicType.Artificial">
            <summary>
            Artificial harmonic
            </summary>
        </member>
        <member name="F:AlphaTab.Model.HarmonicType.Pinch">
            <summary>
            Pinch harmonics
            </summary>
        </member>
        <member name="F:AlphaTab.Model.HarmonicType.Tap">
            <summary>
            Tap harmonics
            </summary>
        </member>
        <member name="F:AlphaTab.Model.HarmonicType.Semi">
            <summary>
            Semi harmonics
            </summary>
        </member>
        <member name="F:AlphaTab.Model.HarmonicType.Feedback">
            <summary>
            Feedback harmonics
            </summary>
        </member>
        <member name="T:AlphaTab.Model.KeySignature">
            <summary>
            This public enumeration lists all available key signatures
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.Cb">
            <summary>
            Cb (7 flats)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.Gb">
            <summary>
            Gb (6 flats)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.Db">
            <summary>
            Db (5 flats)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.Ab">
            <summary>
            Ab (4 flats)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.Eb">
            <summary>
            Eb (3 flats)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.Bb">
            <summary>
            Bb (2 flats)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.F">
            <summary>
            F (1 flat)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.C">
            <summary>
            C (no signs)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.G">
            <summary>
            G (1 sharp)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.D">
            <summary>
            D (2 sharp)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.A">
            <summary>
            A (3 sharp)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.E">
            <summary>
            E (4 sharp)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.B">
            <summary>
            B (5 sharp)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.FSharp">
            <summary>
            F# (6 sharp)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignature.CSharp">
            <summary>
            C# (8 sharp)
            </summary>
        </member>
        <member name="T:AlphaTab.Model.KeySignatureType">
            <summary>
            This public enumeration lists all available types of KeySignatures
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignatureType.Major">
            <summary>
            Major
            </summary>
        </member>
        <member name="F:AlphaTab.Model.KeySignatureType.Minor">
            <summary>
            Minor
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Lyrics">
            <summary>
            Represents the lyrics of a song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Lyrics.StartBar">
            <summary>
            Gets or sets he start bar on which the lyrics should begin. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Lyrics.Text">
            <summary>
            Gets or sets the raw lyrics text in Guitar Pro format.
            (spaces split word syllables, plus merge syllables, [..] are comments) 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Lyrics.Chunks">
            <summary>
            Gets or sets the prepared chunks of the lyrics to apply to beats. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.MasterBar">
            <summary>
            The MasterBar stores information about a bar which affects
            all tracks.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.MasterBar.MaxAlternateEndings">
            <summary>
            The maximum alternate endings.  (1 byte with 8 bitflags)
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.AlternateEndings">
            <summary>
            Gets or sets the bitflag for the alternate endings. Each bit defines for which repeat counts
            the bar is played.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.NextMasterBar">
            <summary>
            Gets or sets the next masterbar in the song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.PreviousMasterBar">
            <summary>
            Gets or sets the next masterbar in the song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.Index">
            <summary>
            Gets the zero based index of the masterbar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.KeySignature">
            <summary>
            Gets or sets the key signature used on all bars.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.KeySignatureType">
            <summary>
            Gets or sets the type of key signature (major/minor)
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.IsDoubleBar">
            <summary>
            Gets or sets whether a double bar is shown for this masterbar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.IsRepeatStart">
            <summary>
            Gets or sets whether a repeat section starts on this masterbar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.IsRepeatEnd">
            <summary>
            Gets or sets whether a repeat section ends on this masterbar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.RepeatCount">
            <summary>
            Gets or sets the number of repeats for the current repeat section. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.RepeatGroup">
            <summary>
            Gets or sets the repeat group this bar belongs to. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.TimeSignatureNumerator">
            <summary>
            Gets or sets the time signature numerator.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.TimeSignatureDenominator">
            <summary>
            Gets or sets the time signature denominiator. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.TimeSignatureCommon">
            <summary>
            Gets or sets whether this is bar has a common time signature. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.TripletFeel">
            <summary>
            Gets or sets the triplet feel that is valid for this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.Section">
            <summary>
            Gets or sets the new section information for this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.IsSectionStart">
            <summary>
            Gets a value indicating whether a new section starts on this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.TempoAutomation">
            <summary>
            Gets or sets the tempo automation for this bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.Score">
            <summary>
            Gets or sets the reference to the score this song belongs to. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.Fermata">
            <summary>
            Gets or sets the fermatas for this bar. The key is the offset of the fermata in midi ticks. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.Start">
            <summary>
            The timeline position of the voice within the whole score. (unit: midi ticks)
            </summary>
        </member>
        <member name="M:AlphaTab.Model.MasterBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.MasterBar"/> class.
            </summary>
        </member>
        <member name="M:AlphaTab.Model.MasterBar.CalculateDuration">
            <summary>
            Calculates the time spent in this bar. (unit: midi ticks)
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Model.MasterBar.AddFermata(System.Int32,AlphaTab.Model.Fermata)">
            <summary>
            Adds a fermata to the masterbar. 
            </summary>
            <param name="offset">The offset of the fermata within the bar in midi ticks. </param>
            <param name="fermata">The fermata.</param>
        </member>
        <member name="M:AlphaTab.Model.MasterBar.GetFermata(AlphaTab.Model.Beat)">
            <summary>
            Gets the fermata for a given beat. 
            </summary>
            <param name="beat">The beat to get the fermata for.</param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Model.ModelUtils">
            <summary>
            This public class contains some utilities for working with model public classes
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Note">
            <summary>
            A note is a single played sound on a fretted instrument. 
            It consists of a fret offset and a string on which the note is played on.
            It also can be modified by a lot of different effects.  
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Note.GlobalNoteId">
            <summary>
            This is a global counter for all notes. We use it 
            at several locations for lookup tables. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Id">
            <summary>
            Gets or sets the unique id of this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Index">
            <summary>
            Gets or sets the zero-based index of this note within the beat. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Accentuated">
            <summary>
            Gets or sets the accentuation of this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.BendType">
            <summary>
            Gets or sets the bend type for this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.BendStyle">
            <summary>
            Gets or sets the bend style for this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.BendOrigin">
            <summary>
            Gets or sets the note from which this note continues the bend. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsContinuedBend">
            <summary>
            Gets or sets whether this note continues a bend from a previous note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.BendPoints">
            <summary>
            Gets or sets a list of the points defining the bend behavior. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.MaxBendPoint">
            <summary>
            Gets or sets the bend point with the highest bend value. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.HasBend">
            <summary>
            Gets a value indicating whether this note is bended.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsStringed">
            <summary>
            Gets a value indicating whether this note is defined via a string on the instrument. . 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Fret">
            <summary>
            Gets or sets the fret on which this note is played on the instrument. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.String">
            <summary>
            Gets or sets the string number where the note is placed. 
            1 is the lowest string on the guitar and the bottom line on the tablature. 
            It then increases the the number of strings on available on the track. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsPiano">
            <summary>
            Gets a value indicating whether the value of this note is defined via octave and tone. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Octave">
            <summary>
            Gets or sets the octave on which this note is played. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Tone">
            <summary>
            Gets or sets the tone of this note within the octave. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsPercussion">
            <summary>
            Gets a value indicating whether this note is a percussion note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Element">
            <summary>
            Gets or sets the percusson element. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Variation">
            <summary>
            Gets or sets the variation of this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsVisible">
            <summary>
            Gets or sets whether this note is visible on the music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsHammerPullOrigin">
            <summary>
            Gets or sets whether this note starts a hammeron or pulloff. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsHammerPullDestination">
            <summary>
            Gets a value indicating whether this note ends a hammeron or pulloff. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.HammerPullOrigin">
            <summary>
            Gets the origin of the hammeron/pulloff of this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.HammerPullDestination">
            <summary>
            Gets the destination for the hammeron/pullof started by this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsSlurOrigin">
            <summary>
            Gets or sets whether this note starts a slur. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsSlurDestination">
            <summary>
            Gets or sets whether this note finishes a slur. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.SlurOrigin">
            <summary>
            Gets or sets the note where the slur of this note starts. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.SlurDestination">
            <summary>
            Gets or sets the note where the slur of this note ends.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsHarmonic">
            <summary>
            Gets or sets whether this note has an harmonic effect.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.HarmonicType">
            <summary>
            Gets or sets the harmonic type applied to this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.HarmonicValue">
            <summary>
            Gets or sets the value defining the harmonic pitch. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsGhost">
            <summary>
            Gets or sets whether the note is a ghost note and shown in parenthesis. Also this will make the note a bit more silent. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsLetRing">
            <summary>
            Gets or sets whether this note has a let-ring effect. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.LetRingDestination">
            <summary>
            Gets or sets the destination note for the let-ring effect.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsPalmMute">
            <summary>
            Gets or sets whether this note has a palm-mute effect. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.PalmMuteDestination">
            <summary>
            Gets or sets the destination note for the palm-mute effect. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsDead">
            <summary>
            Gets or sets whether the note is shown and played as dead note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsStaccato">
            <summary>
            Gets or sets whether the note is played as staccato. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.SlideType">
            <summary>
            Gets or sets the slide type this note is played with. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.SlideTarget">
            <summary>
            Gets or sets the target note for several slide types. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Vibrato">
            <summary>
            Gets or sets whether a vibrato is played on the note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.TieOrigin">
            <summary>
            Gets or sets the origin of the tied if this note is tied. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.TieDestination">
            <summary>
            Gets or sets the desination of the tie. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsTieDestination">
            <summary>
            Gets or sets whether this note is ends a tied note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsTieOrigin">
            <summary>
            Gets or sets whether this note starts or continues a tied note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.LeftHandFinger">
            <summary>
            Gets or sets the fingers used for this note on the left hand.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.RightHandFinger">
            <summary>
            Gets or sets the fingers used for this note on the right hand.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsFingering">
            <summary>
            Gets or sets whether this note has fingering defined. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.TrillValue">
            <summary>
            Gets or sets the target note value for the trill effect. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.TrillFret">
            <summary>
            Gets the fret for the trill. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.IsTrill">
            <summary>
            Gets a value indicating whether this note has a trill effect. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.TrillSpeed">
            <summary>
            Gets or sets the speed of the trill effect. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.DurationPercent">
            <summary>
            Gets or sets the percentual duration of the note relative to the overall beat duration .
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.AccidentalMode">
            <summary>
            Gets or sets how accidetnals for this note should  be handled. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Beat">
            <summary>
            Gets or sets the reference to the parent beat to which this note belongs to. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.Dynamic">
            <summary>
            Gets or sets the dynamics for this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.StringTuning">
            <summary>
            Gets the base note value for the string of this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.RealValue">
            <summary>
            Gets the absolute value of this note for playback. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.HarmonicPitch">
            <summary>
            Gets or sets the harmonic pitch value for this note. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.DisplayValue">
            <summary>
            Gets the absolute value of this note considering
            offsets by bends and ottavia
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.DisplayValueWithoutBend">
            <summary>
            Gets the absolute value of this note considering all effects beside bends. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.HasQuarterToneOffset">
            <summary>
            Gets or sets whether the note has a offset of a quartertone caused by bends.
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Note.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.Note"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.NoteAccidentalMode">
            <summary>
            Lists the modes how accidentals are handled for notes
            </summary>
        </member>
        <member name="F:AlphaTab.Model.NoteAccidentalMode.Default">
            <summary>
            Accidentals are calculated automatically. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.NoteAccidentalMode.SwapAccidentals">
            <summary>
            If the default behavior calculates a Sharp, use flat instead (and vice versa).
            </summary>
        </member>
        <member name="F:AlphaTab.Model.NoteAccidentalMode.ForceNatural">
            <summary>
            This will move the note one line down and applies a Naturalize. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.NoteAccidentalMode.ForceSharp">
            <summary>
            This will move the note one line down and applies a Sharp. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.NoteAccidentalMode.ForceFlat">
            <summary>
            This will move the note one line up and applies a Flat. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Ottavia">
            <summary>
            Lists all ottavia.  
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Ottavia._15ma">
            <summary>
            2 octaves higher 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Ottavia._8va">
            <summary>
            1 octave higher
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Ottavia.Regular">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Ottavia._8vb">
            <summary>
            1 octave lower
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Ottavia._15mb">
            <summary>
            2 octaves lower. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.PickStroke">
            <summary>
            Lists all types of pick strokes.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.PickStroke.None">
            <summary>
            No pickstroke used. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.PickStroke.Up">
            <summary>
            Pickstroke up. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.PickStroke.Down">
            <summary>
            Pickstroke down
            </summary>
        </member>
        <member name="T:AlphaTab.Model.PlaybackInformation">
            <summary>
            This public class stores the midi specific information of a track needed
            for playback.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.PlaybackInformation.Volume">
            <summary>
            Gets or sets the volume (0-16)
            </summary>
        </member>
        <member name="P:AlphaTab.Model.PlaybackInformation.Balance">
            <summary>
            Gets or sets the balance (0-16; 8=center)
            </summary>
        </member>
        <member name="P:AlphaTab.Model.PlaybackInformation.Port">
            <summary>
            Gets or sets the midi port to use.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.PlaybackInformation.Program">
            <summary>
            Gets or sets the midi program to use. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.PlaybackInformation.PrimaryChannel">
            <summary>
            Gets or sets the primary channel for all normal midi events. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.PlaybackInformation.SecondaryChannel">
            <summary>
            Gets or sets the secondary channel for special midi events. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.PlaybackInformation.IsMute">
            <summary>
            Gets or sets whether the track is muted.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.PlaybackInformation.IsSolo">
            <summary>
            Gets or sets whether the track is playing alone. 
            </summary>
        </member>
        <member name="M:AlphaTab.Model.PlaybackInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.PlaybackInformation"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.RenderStylesheet">
            <summary>
            This class represents the rendering stylesheet.
            It contains settings which control the display of the score when rendered. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.RenderStylesheet.HideDynamics">
            <summary>
            Gets or sets whether dynamics are hidden.
            </summary>
        </member>
        <member name="M:AlphaTab.Model.RenderStylesheet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.RenderStylesheet"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.RepeatGroup">
            <summary>
            This public class can store the information about a group of measures which are repeated
            </summary>
        </member>
        <member name="P:AlphaTab.Model.RepeatGroup.MasterBars">
            <summary>
            All masterbars repeated within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Model.RepeatGroup.Openings">
            <summary>
            a list of masterbars which open the group. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.RepeatGroup.Closings">
            <summary>
            a list of masterbars which close the group. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.RepeatGroup.IsOpened">
            <summary>
             true if the repeat group was opened well
            </summary>
        </member>
        <member name="P:AlphaTab.Model.RepeatGroup.IsClosed">
            <summary>
             true if the repeat group was closed well
            </summary>
        </member>
        <member name="M:AlphaTab.Model.RepeatGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.RepeatGroup"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Score">
            <summary>
            The score is the root node of the complete 
            model. It stores the basic information of 
            a song and stores the sub components. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Album">
            <summary>
            The album of this song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Artist">
            <summary>
            The artist who performs this song.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Copyright">
            <summary>
            The owner of the copyright of this song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Instructions">
            <summary>
            Additional instructions
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Music">
            <summary>
            The author of the music. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Notices">
            <summary>
            Some additional notes about the song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.SubTitle">
            <summary>
            The subtitle of the song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Title">
            <summary>
            The title of the song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Words">
            <summary>
            The author of the song lyrics
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Tab">
            <summary>
            The author of this tablature.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Tempo">
            <summary>
            Gets or sets the global tempo of the song in BPM. The tempo might change via <see cref="P:AlphaTab.Model.MasterBar.TempoAutomation"/>.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.TempoLabel">
            <summary>
            Gets or sets the name/label of the tempo. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.MasterBars">
            <summary>
            Gets or sets a list of all masterbars contained in this song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Tracks">
            <summary>
            Gets or sets a list of all tracks contained in this song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Stylesheet">
            <summary>
            Gets or sets the rendering stylesheet for this song.
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Score.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.Score"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Section">
            <summary>
            This public class is used to describe the beginning of a 
            section within a song. It acts like a marker. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Section.Marker">
            <summary>
            Gets or sets the marker ID for this section. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Section.Text">
            <summary>
            Gets or sets the descriptional text of this section.
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Section.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.Section"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.SimileMark">
            <summary>
            Lists all simile mark types as they are assigned to bars. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SimileMark.None">
            <summary>
            No simile mark is applied
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SimileMark.Simple">
            <summary>
            A simple simile mark. The previous bar is repeated. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SimileMark.FirstOfDouble">
            <summary>
            A double simile mark. This value is assigned to the first
            bar of the 2 repeat bars. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SimileMark.SecondOfDouble">
            <summary>
            A double simile mark. This value is assigned to the second
            bar of the 2 repeat bars. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.SlideType">
            <summary>
            This public enum lists all different types of finger slides on a string.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SlideType.None">
            <summary>
            No slide. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SlideType.Shift">
            <summary>
            Shift slide to next note on same string
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SlideType.Legato">
            <summary>
            Legato slide to next note on same string. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SlideType.IntoFromBelow">
            <summary>
            Slide into the note from below on the same string.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SlideType.IntoFromAbove">
            <summary>
            Slide into the note from above on the same string.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SlideType.OutUp">
            <summary>
            Slide out from the note from upwards on the same string.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SlideType.OutDown">
            <summary>
            Slide out from the note from downwards on the same string.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SlideType.PickSlideDown">
            <summary>
            Pickslide down on this note
            </summary>
        </member>
        <member name="F:AlphaTab.Model.SlideType.PickSlideUp">
            <summary>
            Pickslide up on this note
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Staff">
            <summary>
            This class describes a single staff within a track. There are instruments like pianos
            where a single track can contain multiple staffs. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.Index">
            <summary>
            Gets or sets the zero-based index of this staff within the track.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.Track">
            <summary>
            Gets or sets the reference to the track this staff belongs to. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.Bars">
            <summary>
            Gets or sets a list of all bars contained in this staff. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.Chords">
            <summary>
            Gets or sets a list of all chords defined for this staff. <see cref="P:AlphaTab.Model.Beat.ChordId"/> refers to entries in this lookup.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.Capo">
            <summary>
            Gets or sets the fret on which a capo is set. s
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.TranspositionPitch">
            <summary>
            Gets or sets the number of semitones this track should be
            transposed. This applies to rendering and playback.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.DisplayTranspositionPitch">
            <summary>
            Gets or sets the number of semitones this track should be 
            transposed. This applies only to rendering. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.Tuning">
            <summary>
            Get or set the guitar tuning of the guitar. This tuning also indicates the number of strings shown in the
            guitar tablature. Unlike the <see cref="P:AlphaTab.Model.Note.String"/> property this array directly represents
            the order of the tracks shown in the tablature. The first item is the most top tablature line. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.TuningName">
            <summary>
            Gets or sets the name of the tuning.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.IsStringed">
            <summary>
            Gets a value indicating whether this staff contains string based notes.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.ShowTablature">
            <summary>
            Gets or sets whether the tabs are shown. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.ShowStandardNotation">
            <summary>
            Gets or sets whether the standard notation is shown. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Staff.IsPercussion">
            <summary>
            Gets or sets whether the staff contains percussion notation
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Staff.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.Staff"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Track">
            <summary>
            This public class describes a single track or instrument of score.
            It is bascially a list of staffs containing individual music notation kinds.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Track.Index">
            <summary>
            Gets or sets the zero-based index of this track. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Track.Score">
            <summary>
            Gets or sets the reference this track belongs to. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Track.Staves">
            <summary>
            Gets or sets the list of staffs that are defined for this track. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Track.PlaybackInfo">
            <summary>
            Gets or sets the playback information for this track. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Track.Color">
            <summary>
            Gets or sets the display color defined for this track. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Track.Name">
            <summary>
            Gets or sets the long name of this track. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Track.ShortName">
            <summary>
            Gets or sets the short name of this track. 
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Track.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.Track"/> class.
            </summary>
            <param name="staveCount">The stave count.</param>
        </member>
        <member name="T:AlphaTab.Model.TripletFeel">
            <summary>
            This public enumeration lists all feels of triplets.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.TripletFeel.NoTripletFeel">
            <summary>
            No triplet feel
            </summary>
        </member>
        <member name="F:AlphaTab.Model.TripletFeel.Triplet16th">
            <summary>
            Triplet 16th
            </summary>
        </member>
        <member name="F:AlphaTab.Model.TripletFeel.Triplet8th">
            <summary>
            Triplet 8th
            </summary>
        </member>
        <member name="F:AlphaTab.Model.TripletFeel.Dotted16th">
            <summary>
            Dotted 16th
            </summary>
        </member>
        <member name="F:AlphaTab.Model.TripletFeel.Dotted8th">
            <summary>
            Dotte d8th
            </summary>
        </member>
        <member name="F:AlphaTab.Model.TripletFeel.Scottish16th">
            <summary>
            Scottish 16th
            </summary>
        </member>
        <member name="F:AlphaTab.Model.TripletFeel.Scottish8th">
            <summary>
            Scottish 8th
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Tuning">
            <summary>
            This public class represents a predefined string tuning.
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Tuning.GetDefaultTuningFor(System.Int32)">
            <summary>
            Gets the default tuning for the given string count. 
            </summary>
            <param name="stringCount">The string count. </param>
            <returns>The tuning for the given string count or null if the string count is not defined. </returns>
        </member>
        <member name="M:AlphaTab.Model.Tuning.GetPresetsFor(System.Int32)">
            <summary>
            Gets a list of all tuning presets for a given stirng count. 
            </summary>
            <param name="stringCount">The string count. </param>
            <returns>The list of known tunings for the given string count or an empty list if the string count is not defined. </returns>
        </member>
        <member name="M:AlphaTab.Model.Tuning.FindTuning(System.Int32[])">
            <summary>
            Tries to find a known tuning by a given list of tuning values. 
            </summary>
            <param name="strings">The values defining the tuning. </param>
            <returns>The known tuning. </returns>
        </member>
        <member name="P:AlphaTab.Model.Tuning.IsStandard">
            <summary>
            Gets or sets whether this is the standard tuning for this number of strings. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Tuning.Name">
            <summary>
            Gets or sets the name of the tuning. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Tuning.Tunings">
            <summary>
            Gets or sets the values for each string of the instrument. 
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Tuning.#ctor(System.String,System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.Tuning"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="tuning">The tuning.</param>
            <param name="isStandard">if set to <c>true</c> [is standard].</param>
        </member>
        <member name="M:AlphaTab.Model.TuningParser.IsTuning(System.String)">
            <summary>
            Checks if the given string is a tuning inticator.
            </summary>Checks if the given string is a tuning inticator.
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Model.VibratoType">
            <summary>
            This public enum lists all vibrato types that can be performed.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.VibratoType.None">
            <summary>
            No vibrato.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.VibratoType.Slight">
            <summary>
            A slight vibrato. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.VibratoType.Wide">
            <summary>
            A wide vibrato.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Voice">
            <summary>
            A voice represents a group of beats 
            that can be played during a bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Voice.Index">
            <summary>
            Gets or sets the zero-based index of this voice within the bar. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Voice.Bar">
            <summary>
            Gets or sets the reference to the bar this voice belongs to. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Voice.Beats">
            <summary>
            Gets or sets the list of beats contained in this voice. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Voice.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this voice is empty. 
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Voice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Model.Voice"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.WhammyType">
            <summary>
            Lists all types of whammy bars
            </summary>
        </member>
        <member name="F:AlphaTab.Model.WhammyType.None">
            <summary>
            No whammy at all
            </summary>
        </member>
        <member name="F:AlphaTab.Model.WhammyType.Custom">
            <summary>
            Individual points define the whammy in a flexible manner. 
            This system was mainly used in Guitar Pro 3-5
            </summary>
        </member>
        <member name="F:AlphaTab.Model.WhammyType.Dive">
            <summary>
            Simple dive to a lower or higher note.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.WhammyType.Dip">
            <summary>
            A dive to a lower or higher note and releasing it back to normal. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.WhammyType.Hold">
            <summary>
            Continue to hold the whammy at the position from a previous whammy. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.WhammyType.Predive">
            <summary>
            Dive to a lower or higher note before playing it. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.WhammyType.PrediveDive">
            <summary>
            Dive to a lower or higher note before playing it, then change to another
            note. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.BarRendererBase">
            <summary>
            This is the base public class for creating blocks which can render bars.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.BarRendererBase.IsLinkedToPrevious">
            <summary>
            Gets or sets whether this renderer is linked to the next one 
            by some glyphs like a vibrato effect
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.BarRendererBase.CanWrap">
            <summary>
            Gets or sets whether this renderer can wrap to the next line
            or it needs to stay connected to the previous one. 
            (e.g. when having double bar repeats we must not separate the 2 bars)
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.BarRendererBase.TopPadding">
            <summary>
            Gets the top padding for the main content of the renderer. 
            Can be used to specify where i.E. the score lines of the notation start.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AlphaTab.Rendering.BarRendererBase.BottomPadding">
            <summary>
            Gets the bottom padding for the main content of the renderer. 
            Can be used to specify where i.E. the score lines of the notation end.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.BeatXPosition">
            <summary>
            Lists the different position modes for <see cref="M:AlphaTab.Rendering.BarRendererBase.GetBeatX(AlphaTab.Model.Beat,AlphaTab.Rendering.BeatXPosition)"/>
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.BeatXPosition.PreNotes">
            <summary>
            Gets the pre-notes position which is located before the accidentals
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.BeatXPosition.OnNotes">
            <summary>
            Gets the on-notes position which is located after the accidentals but before the note heads. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.BeatXPosition.MiddleNotes">
            <summary>
            Gets the middel-notes position which is located after in the middle the note heads. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.BeatXPosition.PostNotes">
            <summary>
            Get the post-notes position which is located at after the note heads. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.BeatXPosition.EndBeat">
            <summary>
            Get the end-beat position which is located at the end of the beat. This position is almost
            equal to the pre-notes position of the next beat.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.BarRendererFactory">
            <summary>
            This is the base public class for creating factories providing BarRenderers
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.EffectBarGlyphSizing">
            <summary>
            Lists all sizing types of the effect bar glyphs
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.SinglePreBeat">
            <summary>
            The effect glyph is placed above the pre-beat glyph which is before 
            the actual note in the area where also accidentals are renderered. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.SingleOnBeat">
            <summary>
            The effect glyph is placed above the on-beat glyph which is where
            the actual note head glyphs are placed. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.SingleOnBeatToEnd">
            <summary>
            The effect glyph is placed above the on-beat glyph which is where
            the actual note head glyphs are placed. The glyph will size to the end of
            the applied beat.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.GroupedBeforeBeat">
            <summary>
            The effect glyph is placed above the on-beat glyph and expaded to the 
            on-beat position of the next beat.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.GroupedOnBeat">
            <summary>
            The effect glyph is placed above the on-beat glyph and expaded to the 
            on-beat position of the next beat.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.GroupedOnBeatToEnd">
            <summary>
            The effect glyph is placed above the on-beat glyph and expaded to the 
            on-beat position of the next beat. The glyph will size to the end of
            the applied beat.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.FullBar">
            <summary>
            The effect glyph is placed on the whole bar covering the whole width
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.EffectBarRenderer">
            <summary>
            This renderer is responsible for displaying effects above or below the other staves
            like the vibrato. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Glyphs.EffectGlyph">
            <summary>
            Effect-Glyphs implementing this public interface get notified
            as they are expanded over multiple beats.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Glyphs.EffectGlyph.Beat">
            <summary>
            Gets or sets the beat where the glyph belongs to.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Glyphs.EffectGlyph.NextGlyph">
            <summary>
            Gets or sets the next glyph of the same type in case 
            the effect glyph is expanded when using <see cref="F:AlphaTab.Rendering.EffectBarGlyphSizing.GroupedOnBeat"/>.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Glyphs.EffectGlyph.PreviousGlyph">
            <summary>
            Gets or sets the previous glyph of the same type in case 
            the effect glyph is expanded when using <see cref="F:AlphaTab.Rendering.EffectBarGlyphSizing.GroupedOnBeat"/>.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Glyphs.Glyph">
            <summary>
            A glyph is a single symbol which can be added to a GlyphBarRenderer for automated
            layouting and drawing of stacked symbols.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Glyphs.GlyphGroup">
            <summary>
            This glyph allows to group several other glyphs to be
            drawn at the same x position
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Glyphs.GroupedEffectGlyph.IsLinkedWithPrevious">
            <summary>
            Gets a value whether this glyph is linked with a previous glyph for rendering. 
            This means this glyph will not be rendered itself, but rendered as part of the very first glyph of this link-group.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Glyphs.GroupedEffectGlyph.IsLinkedWithNext">
            <summary>
            Gets a value whether this glyph is linked with the next glyph for rendering. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Glyphs.SpacingGlyph">
            <summary>
            This simple glyph allows to put an empty region in to a BarRenderer.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Glyphs.VoiceContainerGlyph">
            <summary>
            This glyph acts as container for handling
            multiple voice rendering
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.IEffectBarRendererInfo">
            <summary>
            A public class implementing this public interface can provide the 
            data needed by a EffectBarRenderer to create effect glyphs dynamically.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.IEffectBarRendererInfo.EffectId">
            <summary>
            Gets the unique effect name for this effect. (Used for grouping)
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.IEffectBarRendererInfo.CanShareBand">
            <summary>
            Gets a value indicating whether this effect can share the space 
            with other effects if required. 
            (Example: tempo and dynamics don't share their space with other effects, a let-ring and palm-mute will share the space if possible)
            </summary>
            <returns>true if this effect bar should only be created once for the first track, otherwise false.</returns>
        </member>
        <member name="P:AlphaTab.Rendering.IEffectBarRendererInfo.HideOnMultiTrack">
            <summary>
            Gets a value indicating whether this effect glyphs
            should only be added once on the first track if multiple tracks are rendered.
            (Example: this allows to render the tempo changes only once)
            </summary>
            <returns>true if this effect bar should only be created once for the first track, otherwise false.</returns>
        </member>
        <member name="M:AlphaTab.Rendering.IEffectBarRendererInfo.ShouldCreateGlyph(AlphaTab.Settings,AlphaTab.Model.Beat)">
            <summary>
            Checks whether the given beat has the appropriate effect set and
            needs a glyph creation 
            </summary>
            <param name="settings"></param>
            <param name="beat">the beat storing the data</param>
            <returns>true if the beat has the effect set, otherwise false.</returns>
        </member>
        <member name="P:AlphaTab.Rendering.IEffectBarRendererInfo.SizingMode">
            <summary>
            Gets the sizing mode of the glyphs created by this info.
            </summary>
            <returns>the sizing mode to apply to the glyphs during layout</returns>
        </member>
        <member name="M:AlphaTab.Rendering.IEffectBarRendererInfo.CreateNewGlyph(AlphaTab.Rendering.BarRendererBase,AlphaTab.Model.Beat)">
            <summary>
            Creates a new effect glyph for the given beat. 
            </summary>
            <param name="renderer">the renderer which requests for glyph creation</param>
            <param name="beat">the beat storing the data</param>
            <returns>the glyph which needs to be added to the renderer</returns>
        </member>
        <member name="M:AlphaTab.Rendering.IEffectBarRendererInfo.CanExpand(AlphaTab.Model.Beat,AlphaTab.Model.Beat)">
            <summary>
            Checks whether an effect glyph can be expanded to a particular beat.
            </summary>
            <param name="from">the beat which already has the glyph applied</param>
            <param name="to">the beat which the glyph should get expanded to</param>
            <returns> true if the glyph can be expanded, false if a new glyph needs to be created.</returns>
        </member>
        <member name="T:AlphaTab.Rendering.IScoreRenderer">
            <summary>
            Represents the public interface of the component that can render scores. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.IScoreRenderer.BoundsLookup">
            <summary>
            Gets or sets the lookup which allows fast access to beats at a given position. 
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.IScoreRenderer.Invalidate">
            <summary>
            Invalidates the drawn music sheet and initiates a redraw. 
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.IScoreRenderer.Resize(System.Int32)">
            <summary>
            Triggers a relayout to the given size including redrawing. 
            </summary>
            <param name="width"></param>
        </member>
        <member name="M:AlphaTab.Rendering.IScoreRenderer.Render(AlphaTab.Model.Score,System.Int32[])">
            <summary>
            Initiates the rendering of the specified tracks of the given score. 
            </summary>
            <param name="score">The score defining the tracks. </param>
            <param name="trackIndexes">The indexes of the tracks to draw.</param>
        </member>
        <member name="E:AlphaTab.Rendering.IScoreRenderer.PreRender">
            <summary>
            Occurs before the rendering of the tracks starts.
            </summary>
        </member>
        <member name="E:AlphaTab.Rendering.IScoreRenderer.RenderFinished">
            <summary>
            Occurs after the rendering of the tracks finished. 
            </summary>
        </member>
        <member name="E:AlphaTab.Rendering.IScoreRenderer.PartialRenderFinished">
            <summary>
            Occurs whenever a part of the whole music sheet is rendered and can be displayed. 
            </summary>
        </member>
        <member name="E:AlphaTab.Rendering.IScoreRenderer.PostRenderFinished">
            <summary>
            Occurs when the whole rendering and layout process finished. 
            </summary>
        </member>
        <member name="E:AlphaTab.Rendering.IScoreRenderer.Error">
            <summary>
            Occurs whenever an error happens. 
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.IScoreRenderer.UpdateSettings(AlphaTab.Settings)">
            <summary>
            Updates the settings to the given object. 
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:AlphaTab.Rendering.IScoreRenderer.Destroy">
            <summary>
            Destroys the renderer. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.RenderFinishedEventArgs">
            <summary>
            This eventargs define the details about the rendering and layouting process and are
            provided whenever a part of of the music sheet is rendered. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderFinishedEventArgs.Width">
            <summary>
            Gets or sets the width of the current rendering result. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderFinishedEventArgs.Height">
            <summary>
            Gets or sets the height of the current rendering result.  
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderFinishedEventArgs.TotalWidth">
            <summary>
            Gets or sets the currently known total width of the final music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderFinishedEventArgs.TotalHeight">
            <summary>
            Gets or sets the currently known total height of the final music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderFinishedEventArgs.FirstMasterBarIndex">
            <summary>
            Gets or sets the index of the first masterbar that was rendered in this result. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderFinishedEventArgs.LastMasterBarIndex">
            <summary>
            Gets or sets the index of the last masterbar that was rendered in this result. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderFinishedEventArgs.RenderResult">
            <summary>
            Gets or sets the render engine specific result object which contains the rendered music sheet. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Layout.HeaderFooterElements">
            <summary>
            A list of the elements which can be shown in the header and footer 
            of a rendered song sheet. All values can be combined using bit-operators as they are flags. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.None">
            <summary>
            No elements get rendered. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Title">
            <summary>
            Enables rendering of the title.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.SubTitle">
            <summary>
            Enables rendering of the subtitle.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Artist">
            <summary>
            Enables rendering of the artist.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Album">
            <summary>
            Enables rendering of the album.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Words">
            <summary>
            Enables rendering of the words.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Music">
            <summary>
            Enables rendering of the music.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.WordsAndMusic">
            <summary>
            Enables rendering of the words and music.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Copyright">
            <summary>
            Enables rendering of the copyright.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.PageNumber">
            <summary>
            Enables rendering of the page number.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.All">
            <summary>
            Enables rendering of all elements. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Layout.HorizontalScreenLayout">
            <summary>
            This layout arranges the bars all horizontally
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Layout.PageViewLayout">
            <summary>
            This layout arranges the bars into a fixed width and dynamic height region. 
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Layout.PageViewLayout.FitGroup(AlphaTab.Rendering.Staves.StaveGroup)">
            <summary>
            Realignes the bars in this line according to the available space
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Layout.ScoreLayout">
            <summary>
            This is the base public class for creating new layouting engines for the score renderer. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.RenderingResources">
            <summary>
            This public class contains central definitions for controlling the visual appearance. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.CopyrightFont">
            <summary>
            Gets or sets the font to use for displaying the songs copyright information in the header of the music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.TitleFont">
            <summary>
            Gets or sets the font to use for displaying the songs title in the header of the music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.SubTitleFont">
            <summary>
            Gets or sets the font to use for displaying the songs subtitle in the header of the music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.WordsFont">
            <summary>
            Gets or sets the font to use for displaying the lyrics information in the header of the music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.EffectFont">
            <summary>
            Gets or sets the font to use for displaying certain effect related elements in the music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.FretboardNumberFont">
            <summary>
            Gets or sets the font to use for displaying the fretboard numbers in chord diagrams.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.TablatureFont">
            <summary>
            Gets or sets the font to use for displaying the guitar tablature numbers in the music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.GraceFont">
            <summary>
            Gets or sets the font to use for grace notation related texts in the music sheet.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.StaffLineColor">
            <summary>
            Gets or sets the color to use for rendering the lines of staves. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.BarSeparatorColor">
            <summary>
            Gets or sets the color to use for rendering bar separators, the accolade and repeat signs. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.BarNumberFont">
            <summary>
            Gets or sets the font to use for displaying the bar numbers above the music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.BarNumberColor">
            <summary>
            Gets or sets the color to use for displaying the bar numbers above the music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.FingeringFont">
            <summary>
            Gets or sets the font to use for displaying finger information in the music sheet.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.MarkerFont">
            <summary>
            Gets or sets the font to use for section marker labels shown above the music sheet. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.MainGlyphColor">
            <summary>
            Gets or sets the color to use for music notation elements of the primary voice. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.SecondaryGlyphColor">
            <summary>
            Gets or sets the color to use for music notation elements of the secondary voices. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.RenderingResources.ScoreInfoColor">
            <summary>
            Gets or sets the color to use for displaying the song information above the music sheet. 
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.RenderingResources.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Rendering.RenderingResources"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.ScoreBarRenderer">
            <summary>
            This BarRenderer renders a bar using standard music notation. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.ScoreBarRenderer.SharpKsSteps">
            <summary>
            The step offsets of sharp symbols for sharp key signatures.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.ScoreBarRenderer.FlatKsSteps">
            <summary>
            The step offsets of sharp symbols for flat key signatures.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.ScoreBarRenderer.GetScoreY(System.Single,System.Single)">
            <summary>
            Gets the relative y position of the given steps relative to first line. 
            </summary>
            <param name="steps">the amount of steps while 2 steps are one line</param>
            <param name="correction"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Rendering.ScoreBarRendererFactory">
            <summary>
            This Factory procudes ScoreBarRenderer instances
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.ScoreRenderer">
            <summary>
            This is the main wrapper of the rendering engine which 
            can render a single track of a score object into a notation sheet.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.ScoreRenderer.BoundsLookup">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Rendering.ScoreRenderer.#ctor(AlphaTab.Settings)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Rendering.ScoreRenderer"/> class.
            </summary>
            <param name="settings">The settings to use for rendering.</param>
        </member>
        <member name="M:AlphaTab.Rendering.ScoreRenderer.Destroy">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Rendering.ScoreRenderer.Render(AlphaTab.Model.Score,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Rendering.ScoreRenderer.RenderTracks(AlphaTab.Model.Track[])">
            <summary>
            Initiates rendering fof the given tracks.
            </summary>
            <param name="tracks">The tracks to render.</param>
        </member>
        <member name="M:AlphaTab.Rendering.ScoreRenderer.UpdateSettings(AlphaTab.Settings)">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Rendering.ScoreRenderer.Invalidate">
            <inheritdoc />
        </member>
        <member name="M:AlphaTab.Rendering.ScoreRenderer.Resize(System.Int32)">
            <inheritdoc />
        </member>
        <member name="E:AlphaTab.Rendering.ScoreRenderer.PreRender">
            <inheritdoc />
        </member>
        <member name="E:AlphaTab.Rendering.ScoreRenderer.PartialRenderFinished">
            <inheritdoc />
        </member>
        <member name="E:AlphaTab.Rendering.ScoreRenderer.RenderFinished">
            <inheritdoc />
        </member>
        <member name="E:AlphaTab.Rendering.ScoreRenderer.Error">
            <inheritdoc />
        </member>
        <member name="E:AlphaTab.Rendering.ScoreRenderer.PostRenderFinished">
            <inheritdoc />
        </member>
        <member name="T:AlphaTab.Rendering.Staves.BarLayoutingInfo">
            <summary>
            This public class stores size information about a stave. 
            It is used by the layout engine to collect the sizes of score parts
            to align the parts across multiple staves.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.BarLayoutingInfo.Version">
            <summary>
            an internal version number that increments whenever a change was made. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Staves.MasterBarsRenderers">
            <summary>
            This container represents a single column of bar renderers independent from any staves. 
            This container can be used to reorganize renderers into a new staves. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Staves.Staff">
            <summary>
            A Staff represents a single line within a StaveGroup. 
            It stores BarRenderer instances created from a given factory. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.Staff.TrackIndex">
            <summary>
            This is the index of the track being rendered. This is not the index of the track within the model, 
            but the n-th track being rendered. It is the index of the <see cref="P:AlphaTab.Rendering.ScoreRenderer.Tracks"/> array defining 
            which tracks should be rendered. 
            For single-track rendering this will always be zero.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.Staff.StaveTop">
            <summary>
            This is the visual offset from top where the
            Staff contents actually start. Used for grouping 
            using a accolade
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.Staff.StaveBottom">
            <summary>
            This is the visual offset from top where the
            Staff contents actually ends. Used for grouping 
            using a accolade
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Staves.StaveGroup">
            <summary>
            A Staff consists of a list of different staves and groups
            them using an accolade. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.StaveGroup.IsFull">
            <summary>
            Indicates whether this line is full or not. If the line is full the
            bars can be aligned to the maximum width. If the line is not full 
            the bars will not get stretched.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.StaveGroup.Width">
            <summary>
            The width that the content bars actually need
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.TabBarRenderer">
            <summary>
            This BarRenderer renders a bar using guitar tablature notation
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.TabBarRenderer.GetTabY(System.Single,System.Single)">
            <summary>
            Gets the relative y position of the given steps relative to first line.
            </summary>
            <param name="line">the amount of steps while 2 steps are one line</param>
            <param name="correction"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Rendering.TabBarRendererFactory">
            <summary>
            This Factory produces TabBarRenderer instances
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.AccidentalHelper">
            <summary>
            This small utilty public class allows the assignment of accidentals within a 
            desired scope. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.KeySignatureLookup">
            <summary>
            a lookup list containing an info whether the notes within an octave 
            need an accidental rendered. the accidental symbol is determined based on the type of key signature. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.AccidentalNotes">
            <summary>
            Contains the list of notes within an octave have accidentals set.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.StepsPerOctave">
            <summary>
            We always have 7 steps per octave. 
            (by a step the offsets inbetween score lines is meant, 
                 0 steps is on the first line (counting from top)
                 1 steps is on the space inbetween the first and the second line
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.OctaveSteps">
            <summary>
            Those are the amount of steps for the different clefs in case of a note value 0    
            [Neutral, C3, C4, F4, G2]
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.SharpNoteSteps">
            <summary>
            The step offsets of the notes within an octave in case of for sharp keysignatures
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.FlatNoteSteps">
            <summary>
            The step offsets of the notes within an octave in case of for flat keysignatures
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.AccidentalHelper.ApplyAccidental(AlphaTab.Model.Note)">
            <summary>
            Calculates the accidental for the given note and assignes the value to it. 
            The new accidental type is also registered within the current scope
            </summary>
            <param name="note"></param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.AccidentalHelper.ApplyAccidentalForValue(AlphaTab.Model.Beat,System.Int32,System.Boolean)">
            <summary>
            Calculates the accidental for the given note value and assignes the value to it. 
            The new accidental type is also registered within the current scope
            </summary>
            <param name="relatedBeat"></param>
            <param name="noteValue"></param>
            <param name="quarterBend"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.BeamBarType">
            <summary>
            Lists all types how two voices can be joined with bars.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.BeamBarType.Full">
            <summary>
            Full Bar from current to next
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.BeamBarType.PartLeft">
            <summary>
            A small Bar from current to previous
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.BeamBarType.PartRight">
            <summary>
            A small bar from current to next
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.BeamingHelper">
            <summary>
            This public class helps drawing beams and bars for notes.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.BeamingHelper._beatLineXPositions">
            <summary>
            stores the X-positions for beat indices
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.FingeringCount">
            <summary>
            the number of fingering indicators that will be drawn
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.HasTuplet">
            <summary>
            an indicator whether any beat has a tuplet on it. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.FirstMinNoteValue">
            <summary>
            the first min note within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.FirstMaxNoteValue">
            <summary>
            the first max note within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.LastMinNoteValue">
            <summary>
            the last min note within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.LastMaxNoteValue">
            <summary>
            the last max note within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.MinNoteValue">
            <summary>
            the overall min note value within this group. 
            This includes values caused by bends. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.MaxNoteValue">
            <summary>
            the overall max note value within this group
            This includes values caused by bends. 
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BeamingHelper.IsPositionFrom(System.String,AlphaTab.Model.Beat)">
            <summary>
            Returns whether the the position of the given beat, was registered by the staff of the given ID
            </summary>
            <param name="staffId"></param>
            <param name="beat"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.Bounds">
            <summary>
            Represents a rectangular area within the renderer music notation.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.Bounds.X">
            <summary>
            Gets or sets the X-position of the rectangle within the music notation.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.Bounds.Y">
            <summary>
            Gets or sets the Y-position of the rectangle within the music notation.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.Bounds.W">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.Bounds.H">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.StaveGroupBounds">
            <summary>
            Represents the bounds of a stave group. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.StaveGroupBounds.Index">
            <summary>
            Gets or sets the index of the bounds within the parent lookup.
            This allows fast access of the next/previous groups.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.StaveGroupBounds.VisualBounds">
            <summary>
            Gets or sets the bounds covering all visually visible elements of this stave group.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.StaveGroupBounds.RealBounds">
            <summary>
            Gets or sets the actual bounds of the elements in this stave group including whitespace areas.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.StaveGroupBounds.Bars">
            <summary>
            Gets or sets the list of master bar bounds related to this stave group.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.StaveGroupBounds.BoundsLookup">
            <summary>
            Gets or sets a reference to the parent bounds lookup.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.StaveGroupBounds.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Rendering.Utils.StaveGroupBounds"/> class.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.StaveGroupBounds.Finish">
            <summary>
            Finished the lookup for optimized access. 
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.StaveGroupBounds.AddBar(AlphaTab.Rendering.Utils.MasterBarBounds)">
            <summary>
            Adds a new master bar to this lookup.
            </summary>
            <param name="bounds">The master bar bounds to add.</param>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.StaveGroupBounds.FindBarAtPos(System.Single)">
            <summary>
            Tries to find the master bar bounds that are located at the given X-position.
            </summary>
            <param name="x">The X-position to find a master bar.</param>
            <returns>The master bounds at the given X-position.</returns>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.MasterBarBounds">
            <summary>
            Represents the boundaries of a list of bars related to a single master bar.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.MasterBarBounds.Index">
            <summary>
            Gets or sets the index of this bounds relative within the parent lookup. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.MasterBarBounds.IsFirstOfLine">
            <summary>
            Gets or sets a value indicating whether this bounds are the first of the line. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.MasterBarBounds.VisualBounds">
            <summary>
            Gets or sets the bounds covering all visually visible elements spanning all bars of this master bar.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.MasterBarBounds.RealBounds">
            <summary>
            Gets or sets the actual bounds of the elements in this master bar including whitespace areas.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.MasterBarBounds.LineAlignedBounds">
            <summary>
            Gets or sets the actual bounds which are exactly aligned with the lines of the staffs.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.MasterBarBounds.Bars">
            <summary>
            Gets or sets the list of individual bars within this lookup.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.MasterBarBounds.StaveGroupBounds">
            <summary>
            Gets or sets a reference to the parent <see cref="P:AlphaTab.Rendering.Utils.MasterBarBounds.StaveGroupBounds"/>.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.MasterBarBounds.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Rendering.Utils.MasterBarBounds"/> class.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.MasterBarBounds.AddBar(AlphaTab.Rendering.Utils.BarBounds)">
            <summary>
            Adds a new bar to this lookup.
            </summary>
            <param name="bounds">The bar bounds to add to this lookup.</param>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.MasterBarBounds.FindBeatAtPos(System.Single,System.Single)">
            <summary>
            Tries to find a beat at the given location.
            </summary>
            <param name="x">The absolute X position where the beat spans across.</param>
            <param name="y">The absolute Y position where the beat spans across.</param>
            <returns>The beat that spans across the given point, or null if none of the contained bars had a beat at this position.</returns>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.MasterBarBounds.Finish">
            <summary>
            Finishes the lookup object and optimizes itself for fast access.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.MasterBarBounds.AddBeat(AlphaTab.Rendering.Utils.BeatBounds)">
            <summary>
            Adds a new beat to the lookup.
            </summary>
            <param name="bounds">The beat bounds to add.</param>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.BarBounds">
            <summary>
            Represents the boundaries of a single bar.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BarBounds.MasterBarBounds">
            <summary>
            Gets or sets the reference to the related <see cref="P:AlphaTab.Rendering.Utils.BarBounds.MasterBarBounds"/>
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BarBounds.VisualBounds">
            <summary>
            Gets or sets the bounds covering all visually visible elements spanning this bar.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BarBounds.RealBounds">
            <summary>
            Gets or sets the actual bounds of the elements in this bar including whitespace areas.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BarBounds.Bar">
            <summary>
            Gets or sets the bar related to this boundaries.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BarBounds.Beats">
            <summary>
            Gets or sets a list of the beats contained in this lookup.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BarBounds.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Rendering.Utils.BarBounds"/> class.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BarBounds.AddBeat(AlphaTab.Rendering.Utils.BeatBounds)">
            <summary>
            Adds a new beat to this lookup.
            </summary>
            <param name="bounds">The beat bounds to add.</param>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BarBounds.FindBeatAtPos(System.Single)">
            <summary>
            Tries to find the beat at the given X-position.
            </summary>
            <param name="x">The X-position of the beat to find.</param>
            <returns>The beat at the given X-position or null if none was found.</returns>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.BeatBounds">
            <summary>
            Represents the bounds of a single beat.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeatBounds.BarBounds">
            <summary>
            Gets or sets the reference to the parent <see cref="P:AlphaTab.Rendering.Utils.BeatBounds.BarBounds"/>.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeatBounds.VisualBounds">
            <summary>
            Gets or sets the bounds covering all visually visible elements spanning this beat.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeatBounds.RealBounds">
            <summary>
            Gets or sets the actual bounds of the elements in this beat including whitespace areas.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeatBounds.Beat">
            <summary>
            Gets or sets the beat related to this bounds.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeatBounds.Notes">
            <summary>
            Gets or sets the individual note positions of this beat (if <see cref="P:AlphaTab.Settings.IncludeNoteBounds"/> was set to true).
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BeatBounds.AddNote(AlphaTab.Rendering.Utils.NoteBounds)">
            <summary>
            Adds a new note to this bounds.
            </summary>
            <param name="bounds">The note bounds to add.</param>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BeatBounds.FindNoteAtPos(System.Single,System.Single)">
            <summary>
            Tries to find a note at the given position.
            </summary>
            <param name="x">The X-position of the note to find.</param>
            <param name="y">The Y-position of the note to find.</param>
            <returns>The note at the given position or null if no note was found, or the note lookup was not enabled before rendering.</returns>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.NoteBounds">
            <summary>
            Represents the bounds of a single note
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.NoteBounds.NoteHeadBounds">
            <summary>
            Gets or sets the bounds of the individual note head.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.NoteBounds.Note">
            <summary>
            Gets or sets the note related to this instance.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.BoundsLookup">
            <summary>
            Represents a lookup cache for quickly finding bars, beats and notes at a given position.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BoundsLookup.StaveGroups">
            <summary>
            Gets a list of all individual stave groups contained in the rendered music notation.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BoundsLookup.IsFinished">
            <summary>
            Gets or sets a value indicating whether this lookup was finished already.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.Rendering.Utils.BoundsLookup"/> class.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.Finish">
            <summary>
            Finishes the lookup for optimized access.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.AddNote(AlphaTab.Rendering.Utils.NoteBounds)">
            <summary>
            Adds a new note to the lookup.
            </summary>
            <param name="bounds">The note bounds to add.</param>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.AddStaveGroup(AlphaTab.Rendering.Utils.StaveGroupBounds)">
            <summary>
            Adds a new stave group to the lookup.
            </summary>
            <param name="bounds">The stave group bounds to add.</param>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.AddMasterBar(AlphaTab.Rendering.Utils.MasterBarBounds)">
            <summary>
            Adds a new master bar to the lookup.
            </summary>
            <param name="bounds">The master bar bounds to add.</param>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.AddBeat(AlphaTab.Rendering.Utils.BeatBounds)">
            <summary>
            Adds a new beat to the lookup.
            </summary>
            <param name="bounds">The beat bounds to add.</param>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.FindMasterBarByIndex(System.Int32)">
            <summary>
            Tries to find the master bar bounds by a given index.
            </summary>
            <param name="index">The index of the master bar to find.</param>
            <returns>The master bar bounds if it was rendered, or null if no boundary information is available.</returns>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.FindMasterBar(AlphaTab.Model.MasterBar)">
            <summary>
            Tries to find the master bar bounds by a given master bar.
            </summary>
            <param name="bar">The master bar to find.</param>
            <returns>The master bar bounds if it was rendered, or null if no boundary information is available.</returns>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.FindBeat(AlphaTab.Model.Beat)">
            <summary>
            Tries to find the bounds of a given beat. 
            </summary>
            <param name="beat">The beat to find.</param>
            <returns>The beat bounds if it was rendered, or null if no boundary information is available.</returns>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.GetBeatAtPos(System.Single,System.Single)">
            <summary>
            Tries to find a beat at the given absolute position.
            </summary>
            <param name="x">The absolute X-position of the beat to find.</param>
            <param name="y">The absolute Y-position of the beat to find.</param>
            <returns>The beat found at the given position or null if no beat could be found.</returns>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BoundsLookup.GetNoteAtPos(AlphaTab.Model.Beat,System.Single,System.Single)">
            <summary>
            Tries to find the note at the given position using the given beat for fast access.
            Use <see cref="M:AlphaTab.Rendering.Utils.BoundsLookup.FindBeat(AlphaTab.Model.Beat)"/> to find a beat for a given position first.
            </summary>
            <param name="beat">The beat containing the note.</param>
            <param name="x">The X-position of the note. </param>
            <param name="y">The Y-position of the note.</param>
            <returns>The note at the given position within the beat.</returns>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.PercussionMapper.MapNoteForDisplay(System.Int32)">
            <summary>
            Maps the given note to a normal note value to place the note at the 
            correct line on score notation
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.ScrollMode">
            <summary>
            Lists all modes how alphaTab can scroll the container during playback. 
            </summary>
        </member>
        <member name="F:AlphaTab.ScrollMode.Off">
            <summary>
            Do not scroll automatically
            </summary>
        </member>
        <member name="F:AlphaTab.ScrollMode.Continuous">
            <summary>
            Scrolling happens as soon the offsets of the cursors change. 
            </summary>
        </member>
        <member name="F:AlphaTab.ScrollMode.OffScreen">
            <summary>
            Scrolling happens as soon the cursors exceed the displayed range. 
            </summary>
        </member>
        <member name="T:AlphaTab.DisplayMode">
            <summary>
            Lists all modes on how alphaTab can handle the display and playback of music notation. 
            </summary>
        </member>
        <member name="F:AlphaTab.DisplayMode.GuitarPro">
            <summary>
            Music elements will be displayed and played as in Guitar Pro. 
            </summary>
        </member>
        <member name="F:AlphaTab.DisplayMode.SongBook">
            <summary>
            Music elements will be displayed and played as in traditional songbooks.
            Changes:
            1. Bends
                For bends additional grace beats are introduced. 
                Bends are categorized into gradual and fast bends. 
                    - Gradual bends are indicated by beat text "grad" or "grad.". Bend will sound along the beat duration. 
                    - Fast bends are done right before the next note. If the next note is tied even on-beat of the next note.
            2. Whammy Bars
                Dips are shown as simple annotation over the beats
                Whammy Bars are categorized into gradual and fast. 
                    - Gradual whammys are indicated by beat text "grad" or "grad.". Whammys will sound along the beat duration. 
                    - Fast whammys are done right the beat.
            3. Let Ring
                Tied notes with let ring are not shown in standard notation
                Let ring does not cause a longer playback, duration is defined via tied notes. 
            </summary>
        </member>
        <member name="T:AlphaTab.FingeringMode">
            <summary>
            Lists all modes on how fingerings should be displayed.
            </summary>
        </member>
        <member name="F:AlphaTab.FingeringMode.Score">
            <summary>
            Fingerings will be shown in the standard notation staff. 
            </summary>
        </member>
        <member name="F:AlphaTab.FingeringMode.SingleNoteEffectBand">
            <summary>
            Fingerings will be shown in a effect band above the tabs in case
            they have only a single note on the beat.
            </summary>
        </member>
        <member name="T:AlphaTab.VibratoPlaybackSettings">
            <summary>
            This object defines the details on how to generate the vibrato effects. 
            </summary>
        </member>
        <member name="P:AlphaTab.VibratoPlaybackSettings.NoteWideLength">
            <summary>
            Gets or sets the wavelength of the note-wide vibrato in midi ticks. 
            </summary>
        </member>
        <member name="P:AlphaTab.VibratoPlaybackSettings.NoteWideAmplitude">
            <summary>
            Gets or sets the amplitude for the note-wide vibrato in semitones. 
            </summary>
        </member>
        <member name="P:AlphaTab.VibratoPlaybackSettings.NoteSlightLength">
            <summary>
            Gets or sets the wavelength of the note-slight vibrato in midi ticks. 
            </summary>
        </member>
        <member name="P:AlphaTab.VibratoPlaybackSettings.NoteSlightAmplitude">
            <summary>
            Gets or sets the amplitude for the note-slight vibrato in semitones. 
            </summary>
        </member>
        <member name="P:AlphaTab.VibratoPlaybackSettings.BeatWideLength">
            <summary>
            Gets or sets the wavelength of the beat-wide vibrato in midi ticks. 
            </summary>
        </member>
        <member name="P:AlphaTab.VibratoPlaybackSettings.BeatWideAmplitude">
            <summary>
            Gets or sets the amplitude for the beat-wide vibrato in semitones. 
            </summary>
        </member>
        <member name="P:AlphaTab.VibratoPlaybackSettings.BeatSlightLength">
            <summary>
            Gets or sets the wavelength of the beat-slight vibrato in midi ticks. 
            </summary>
        </member>
        <member name="P:AlphaTab.VibratoPlaybackSettings.BeatSlightAmplitude">
            <summary>
            Gets or sets the amplitude for the beat-slight vibrato in semitones. 
            </summary>
        </member>
        <member name="T:AlphaTab.LayoutSettings">
            <summary>
            Represents the layout specific settings. 
            </summary>
        </member>
        <member name="P:AlphaTab.LayoutSettings.Mode">
            <summary>
            The layouting mode used to arrange the the notation.
            <ul>
             <li><strong>page</strong> - Bars are aligned in rows using a fixed width</li>
             <li><strong>horizontal</strong> - Bars are aligned horizontally in one row</li>
            </ul>
            </summary>
        </member>
        <member name="P:AlphaTab.LayoutSettings.AdditionalSettings">
            <summary>
            Additional layout mode specific settings.
            <strong>mode=page</strong>
            <ul>
             <li><strong>barsPerRow</strong> - Limit the displayed bars per row, <em>-1 for sized based limit</em> (integer, default:-1)</li>
             <li><strong>start</strong> - The bar start index to start layouting with (integer: default: 0)</li>
             <li><strong>count</strong> - The amount of bars to render overall, <em>-1 for all till the end</em>  (integer, default:-1)</li>
             <li><strong>hideInfo</strong> - Render the song information or not (boolean, default:false)</li>
             <li><strong>hideTuning</strong> - Render the tuning information or not (boolean, default:false)</li>
             <li><strong>hideTrackNames</strong> - Render the track names or not (boolean, default:false)</li>
            </ul>
            <strong>mode=horizontal</strong>
            <ul>
             <li><strong>start</strong> - The bar start index to start layouting with (integer: default: 0)</li>
             <li><strong>count</strong> - The amount of bars to render overall, <em>-1 for all till the end</em>  (integer, default:-1)</li>
             <li><strong>hideTrackNames</strong> - Render the track names or not (boolean, default:false)</li>
            </ul>
            </summary>
        </member>
        <member name="M:AlphaTab.LayoutSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.LayoutSettings"/> class.
            </summary>
        </member>
        <member name="T:AlphaTab.StaveSettings">
            <summary>
            Represents the stave specific settings. 
            </summary>
        </member>
        <member name="P:AlphaTab.StaveSettings.Id">
            <summary>
            The stave profile name as it is registered in <see cref="F:AlphaTab.Environment.StaveProfiles"/>
            Default Profiles: 
            <ul>
             <li><strong>score-tab</strong> - Standard music notation and guitar tablature are rendered (default)</li>
             <li><strong>score</strong> - Only standard music notation is rendered</li>
             <li><strong>tab</strong> - Only guitar tablature is rendered</li>
            </ul>
            </summary>
        </member>
        <member name="P:AlphaTab.StaveSettings.AdditionalSettings">
            <summary>
            Additional stave sspecific settings
            <strong>id=tab</strong>
            <ul>
             <li><strong>rhythm</strong> - Renders rhythm beams to tablature notes</li>
            </ul>
            </summary>
        </member>
        <member name="M:AlphaTab.StaveSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.StaveSettings"/> class.
            </summary>
            <param name="id">The id of the settings defining the display mode.</param>
        </member>
        <member name="M:AlphaTab.StaveSettings.Get``1(System.String,``0)">
            <summary>
            Gets the staff layout specific setting using the given key. 
            </summary>
            <typeparam name="T">The data type fo the stored value.</typeparam>
            <param name="key">The key of the setting.</param>
            <param name="def">The default value to return if no setting was specified.</param>
            <returns>The user defined setting for the given key, or <paramref name="def"/> if the user did not specify a custom setting.</returns>
        </member>
        <member name="T:AlphaTab.UI.Cursors">
            <summary>
            This wrapper holds all cursor related elements. 
            </summary>
        </member>
        <member name="P:AlphaTab.UI.Cursors.CursorWrapper">
            <summary>
            Gets the element that spans across the whole music sheet and holds the other cursor elements.  
            </summary>
        </member>
        <member name="P:AlphaTab.UI.Cursors.BarCursor">
            <summary>
            Gets the element that is positioned above the bar that is currently played. 
            </summary>
        </member>
        <member name="P:AlphaTab.UI.Cursors.BeatCursor">
            <summary>
            Gets the element that is positioned above the beat that is currently played. 
            </summary>
        </member>
        <member name="P:AlphaTab.UI.Cursors.SelectionWrapper">
            <summary>
            Gets the element that spans across the whole music sheet and will hold any selection related elements. 
            </summary>
        </member>
        <member name="M:AlphaTab.UI.Cursors.#ctor(AlphaTab.UI.IContainer,AlphaTab.UI.IContainer,AlphaTab.UI.IContainer,AlphaTab.UI.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:AlphaTab.UI.Cursors"/> class.
            </summary>
            <param name="cursorWrapper"></param>
            <param name="barCursor"></param>
            <param name="beatCursor"></param>
            <param name="selectionWrapper"></param>
        </member>
        <member name="T:AlphaTab.UI.IContainer">
            <summary>
            This interface represents a container control in the UI layer. 
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IContainer.Top">
            <summary>
            Gets or sets the Y-position of the control, relative to its parent. 
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IContainer.Left">
            <summary>
            Gets or sets the X-position of the control, relative to its parent. 
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IContainer.Width">
            <summary>
            Gets or sets the width of the control.
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IContainer.Height">
            <summary>
            Gets or sets the height of the control.
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IContainer.IsVisible">
            <summary>
            Gets a value indicating whether the control is visible.
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IContainer.ScrollLeft">
            <summary>
            Gets or sets the horizontal scroll offset of this control if it is scrollable. 
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IContainer.ScrollTop">
            <summary>
            Gets or sets the vertical scroll offset of this control if it is scrollable. 
            </summary>
        </member>
        <member name="M:AlphaTab.UI.IContainer.AppendChild(AlphaTab.UI.IContainer)">
            <summary>
            Adds the given child control to this container. 
            </summary>
            <param name="child">The child control to add.</param>
        </member>
        <member name="E:AlphaTab.UI.IContainer.Scroll">
            <summary>
            This event occurs when a scroll on the control happened. 
            </summary>
        </member>
        <member name="E:AlphaTab.UI.IContainer.Resize">
            <summary>
            This event occurs when the control was resized. 
            </summary>
        </member>
        <member name="M:AlphaTab.UI.IContainer.StopAnimation">
            <summary>
            Stops the animations of this control immediately. 
            </summary>
        </member>
        <member name="M:AlphaTab.UI.IContainer.TransitionToX(System.Double,System.Single)">
            <summary>
            Tells the control to move to the given X-position in the given time. 
            </summary>
            <param name="duration">The milliseconds that should be needed to reach the new X-position</param>
            <param name="x">The new X-position</param>
        </member>
        <member name="E:AlphaTab.UI.IContainer.MouseDown">
            <summary>
            This event occurs when a mouse/finger press happened on the control.
            </summary>
        </member>
        <member name="E:AlphaTab.UI.IContainer.MouseMove">
            <summary>
            This event occurs when a mouse/finger moves on top of the control.
            </summary>
        </member>
        <member name="E:AlphaTab.UI.IContainer.MouseUp">
            <summary>
            This event occurs when a mouse/finger is released from the control.
            </summary>
        </member>
        <member name="M:AlphaTab.UI.IContainer.Clear">
            <summary>
            Clears the container and removes all child items.
            </summary>
        </member>
        <member name="T:AlphaTab.UI.IMouseEventArgs">
            <summary>
            This interface represents the information about a mouse event that occured on the UI. 
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IMouseEventArgs.IsLeftMouseButton">
            <summary>
            Gets a value indicating whether the left mouse button was pressed. 
            </summary>
        </member>
        <member name="M:AlphaTab.UI.IMouseEventArgs.GetX(AlphaTab.UI.IContainer)">
            <summary>
            Gets the X-position of the cursor at the time of the event relative to the given UI container. 
            </summary>
            <param name="relativeTo">The UI element to which the relative position should be calculated.</param>
            <returns>The relative X-position of the cursor to the given UI container at the time the event occured.</returns>
        </member>
        <member name="M:AlphaTab.UI.IMouseEventArgs.GetY(AlphaTab.UI.IContainer)">
            <summary>
            Gets the Y-position of the cursor at the time of the event relative to the given UI container. 
            </summary>
            <param name="relativeTo">The UI element to which the relative position should be calculated.</param>
            <returns>The relative Y-position of the cursor to the given UI container at the time the event occured.</returns>
        </member>
        <member name="M:AlphaTab.UI.IMouseEventArgs.PreventDefault">
            <summary>
            If called, the original mouse action is prevented and the event is flagged as handled. 
            </summary>
        </member>
        <member name="T:AlphaTab.UI.IUiFacade`1">
            <summary>
            This interface represents the UI abstraction between alphaTab and the corresponding UI framework being used. 
            </summary>
            <typeparam name="TSettings">The type of that holds the settings passed from the UI layer.</typeparam>
        </member>
        <member name="P:AlphaTab.UI.IUiFacade`1.RootContainer">
            <summary>
            Gets the root UI element that holds the whole alphaTab control.
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IUiFacade`1.AreWorkersSupported">
            <summary>
            Gets a value indicating whether the UI framework supports worker based rendering. 
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IUiFacade`1.CanRender">
            <summary>
            Gets or sets whether the UI is ready to render the music notation. On some platforms where pre-loading of assets is done asynchronously,
            rendering might need to be deferred. 
            </summary>
        </member>
        <member name="P:AlphaTab.UI.IUiFacade`1.ResizeThrottle">
            <summary>
            Gets the resize throttling in milliseconds. Then the music sheet is resized, the re-rendering is deferred until this timeout is reached. 
            </summary>
        </member>
        <member name="E:AlphaTab.UI.IUiFacade`1.CanRenderChanged">
            <summary>
            This events is fired when the <see cref="P:AlphaTab.UI.IUiFacade`1.CanRender"/> property changes. 
            </summary>
        </member>
        <member name="E:AlphaTab.UI.IUiFacade`1.RootContainerBecameVisible">
            <summary>
            This event is fired when <see cref="P:AlphaTab.UI.IUiFacade`1.RootContainer"/> became visible when it was invisible at the time rendering was initiated. 
            </summary>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.Initialize(AlphaTab.AlphaTabApi{`0},`0)">
            <summary>
            Initializes the UI using the given alphaTab API and settings object. 
            </summary>
            <param name="api">The alphaTab API wrapper responsible for UI interaction.</param>
            <param name="settings">The settings object holding the settings from the UI layer.</param>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.Destroy">
            <summary>
            Tells the UI layer to destroy the alphaTab controls and restore the initial state. 
            </summary>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.CreateCanvasElement">
            <summary>
            Creates the canvas element that wraps all individually rendered partials.  
            </summary>
            <returns>The canvas element that wraps all individually rendered partials.</returns>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.TriggerEvent(AlphaTab.UI.IContainer,System.String,System.Object)">
            <summary>
            Tells the UI layer to trigger an event with the given name and details.
            </summary>
            <param name="container">The element on which the event should be triggered. </param>
            <param name="eventName">The event that should be triggered.</param>
            <param name="details">The object holding the details about the event.</param>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.InitialRender">
            <summary>
            Tells the UI layer to do the initial rendering. 
            </summary>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.BeginAppendRenderResults(AlphaTab.Rendering.RenderFinishedEventArgs)">
            <summary>
            Tells the UI layer to append the given render results to the UI. 
            </summary>
            <param name="renderResults">The rendered partial that should be added to the UI. </param>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.CreateWorkerRenderer">
            <summary>
            Tells the UI layer to create the worker renderer. This method is the UI layer supports worker rendering and worker rendering is not disabled via setting. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.CreateWorkerPlayer">
            <summary>
            Tells the UI layer to create a player worker. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.CreateCursors">
            <summary>
            Creates the cursor objects that are used to highlight the currently played beats and bars. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.BeginInvoke(System.Action)">
            <summary>
            Tells the UI layer to invoke the given action. 
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.RemoveHighlights">
            <summary>
            Tells the UI layer to remove all highlights from highlighted music notation elements. 
            </summary>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.HighlightElements(System.String)">
            <summary>
            Tells the UI layer to highlight the music notation elements with the given ID.
            </summary>
            <param name="groupId">The group id that identifies the elements to be highlighted. </param>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.CreateSelectionElement">
            <summary>
            Creates a new UI element that is used to display the selection rectangle. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.GetScrollContainer">
            <summary>
            Gets the UI element that is used for scrolling during playback. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.GetOffset(AlphaTab.UI.IContainer,AlphaTab.UI.IContainer)">
            <summary>
            Calculates the relative offset of a container to the scroll element. 
            </summary>
            <param name="scrollElement">The parent scroll element to which the relative position is computed. </param>
            <param name="container">The container element for which the relative position is calculated.</param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.ScrollToY(AlphaTab.UI.IContainer,System.Int32,System.Int32)">
            <summary>
            Initiates a vertical scroll on the given element. 
            </summary>
            <param name="scrollElement">The element on which the scrolling should happen.</param>
            <param name="offset">The absolute scroll offset to which scrolling should happen.</param>
            <param name="speed">How fast the scrolling from the current offset to the given one should happen in milliseconds.</param>
        </member>
        <member name="M:AlphaTab.UI.IUiFacade`1.ScrollToX(AlphaTab.UI.IContainer,System.Int32,System.Int32)">
            <summary>
            Initiates a horizontal scroll on the given element. 
            </summary>
            <param name="scrollElement">The element on which the scrolling should happen.</param>
            <param name="offset">The absolute scroll offset to which scrolling should happen.</param>
            <param name="speed">How fast the scrolling from the current offset to the given one should happen in milliseconds.</param>
        </member>
        <member name="T:AlphaTab.Util.LogLevel">
            <summary>
            Defines all loglevels. 
            </summary>
        </member>
        <member name="F:AlphaTab.Util.LogLevel.None">
            <summary>
            No logging
            </summary>
        </member>
        <member name="F:AlphaTab.Util.LogLevel.Debug">
            <summary>
            Debug level (internal details are displayed).
            </summary>
        </member>
        <member name="F:AlphaTab.Util.LogLevel.Info">
            <summary>
            Info level (only important details are shown)
            </summary>
        </member>
        <member name="F:AlphaTab.Util.LogLevel.Warning">
            <summary>
            Warning level
            </summary>
        </member>
        <member name="F:AlphaTab.Util.LogLevel.Error">
            <summary>
            Error level.
            </summary>
        </member>
        <member name="T:AlphaTab.Xml.XmlParser.XmlState">
            <summary>
            faster than enum
            </summary>
        </member>
    </members>
</doc>
